// Code generated by go-swagger; DO NOT EDIT.

package headscale_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new headscale service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for headscale service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	HeadscaleServiceCreateAPIKey(params *HeadscaleServiceCreateAPIKeyParams, opts ...ClientOption) (*HeadscaleServiceCreateAPIKeyOK, error)

	HeadscaleServiceCreatePreAuthKey(params *HeadscaleServiceCreatePreAuthKeyParams, opts ...ClientOption) (*HeadscaleServiceCreatePreAuthKeyOK, error)

	HeadscaleServiceCreateUser(params *HeadscaleServiceCreateUserParams, opts ...ClientOption) (*HeadscaleServiceCreateUserOK, error)

	HeadscaleServiceDebugCreateMachine(params *HeadscaleServiceDebugCreateMachineParams, opts ...ClientOption) (*HeadscaleServiceDebugCreateMachineOK, error)

	HeadscaleServiceDeleteMachine(params *HeadscaleServiceDeleteMachineParams, opts ...ClientOption) (*HeadscaleServiceDeleteMachineOK, error)

	HeadscaleServiceDeleteRoute(params *HeadscaleServiceDeleteRouteParams, opts ...ClientOption) (*HeadscaleServiceDeleteRouteOK, error)

	HeadscaleServiceDeleteUser(params *HeadscaleServiceDeleteUserParams, opts ...ClientOption) (*HeadscaleServiceDeleteUserOK, error)

	HeadscaleServiceDisableRoute(params *HeadscaleServiceDisableRouteParams, opts ...ClientOption) (*HeadscaleServiceDisableRouteOK, error)

	HeadscaleServiceEnableRoute(params *HeadscaleServiceEnableRouteParams, opts ...ClientOption) (*HeadscaleServiceEnableRouteOK, error)

	HeadscaleServiceExpireAPIKey(params *HeadscaleServiceExpireAPIKeyParams, opts ...ClientOption) (*HeadscaleServiceExpireAPIKeyOK, error)

	HeadscaleServiceExpireMachine(params *HeadscaleServiceExpireMachineParams, opts ...ClientOption) (*HeadscaleServiceExpireMachineOK, error)

	HeadscaleServiceExpirePreAuthKey(params *HeadscaleServiceExpirePreAuthKeyParams, opts ...ClientOption) (*HeadscaleServiceExpirePreAuthKeyOK, error)

	HeadscaleServiceGetMachine(params *HeadscaleServiceGetMachineParams, opts ...ClientOption) (*HeadscaleServiceGetMachineOK, error)

	HeadscaleServiceGetMachineRoutes(params *HeadscaleServiceGetMachineRoutesParams, opts ...ClientOption) (*HeadscaleServiceGetMachineRoutesOK, error)

	HeadscaleServiceGetRoutes(params *HeadscaleServiceGetRoutesParams, opts ...ClientOption) (*HeadscaleServiceGetRoutesOK, error)

	HeadscaleServiceGetUser(params *HeadscaleServiceGetUserParams, opts ...ClientOption) (*HeadscaleServiceGetUserOK, error)

	HeadscaleServiceListAPIKeys(params *HeadscaleServiceListAPIKeysParams, opts ...ClientOption) (*HeadscaleServiceListAPIKeysOK, error)

	HeadscaleServiceListMachines(params *HeadscaleServiceListMachinesParams, opts ...ClientOption) (*HeadscaleServiceListMachinesOK, error)

	HeadscaleServiceListPreAuthKeys(params *HeadscaleServiceListPreAuthKeysParams, opts ...ClientOption) (*HeadscaleServiceListPreAuthKeysOK, error)

	HeadscaleServiceListUsers(params *HeadscaleServiceListUsersParams, opts ...ClientOption) (*HeadscaleServiceListUsersOK, error)

	HeadscaleServiceMoveMachine(params *HeadscaleServiceMoveMachineParams, opts ...ClientOption) (*HeadscaleServiceMoveMachineOK, error)

	HeadscaleServiceRegisterMachine(params *HeadscaleServiceRegisterMachineParams, opts ...ClientOption) (*HeadscaleServiceRegisterMachineOK, error)

	HeadscaleServiceRenameMachine(params *HeadscaleServiceRenameMachineParams, opts ...ClientOption) (*HeadscaleServiceRenameMachineOK, error)

	HeadscaleServiceRenameUser(params *HeadscaleServiceRenameUserParams, opts ...ClientOption) (*HeadscaleServiceRenameUserOK, error)

	HeadscaleServiceSetTags(params *HeadscaleServiceSetTagsParams, opts ...ClientOption) (*HeadscaleServiceSetTagsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
HeadscaleServiceCreateAPIKey Apis keys start
*/
func (a *Client) HeadscaleServiceCreateAPIKey(params *HeadscaleServiceCreateAPIKeyParams, opts ...ClientOption) (*HeadscaleServiceCreateAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceCreateAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_CreateApiKey",
		Method:             "POST",
		PathPattern:        "/api/v1/apikey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceCreateAPIKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceCreateAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceCreateAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceCreatePreAuthKey pres auth keys start
*/
func (a *Client) HeadscaleServiceCreatePreAuthKey(params *HeadscaleServiceCreatePreAuthKeyParams, opts ...ClientOption) (*HeadscaleServiceCreatePreAuthKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceCreatePreAuthKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_CreatePreAuthKey",
		Method:             "POST",
		PathPattern:        "/api/v1/preauthkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceCreatePreAuthKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceCreatePreAuthKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceCreatePreAuthKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceCreateUser headscale service create user API
*/
func (a *Client) HeadscaleServiceCreateUser(params *HeadscaleServiceCreateUserParams, opts ...ClientOption) (*HeadscaleServiceCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_CreateUser",
		Method:             "POST",
		PathPattern:        "/api/v1/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceCreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceCreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDebugCreateMachine machines start
*/
func (a *Client) HeadscaleServiceDebugCreateMachine(params *HeadscaleServiceDebugCreateMachineParams, opts ...ClientOption) (*HeadscaleServiceDebugCreateMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDebugCreateMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DebugCreateMachine",
		Method:             "POST",
		PathPattern:        "/api/v1/debug/machine",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDebugCreateMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDebugCreateMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDebugCreateMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDeleteMachine headscale service delete machine API
*/
func (a *Client) HeadscaleServiceDeleteMachine(params *HeadscaleServiceDeleteMachineParams, opts ...ClientOption) (*HeadscaleServiceDeleteMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDeleteMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DeleteMachine",
		Method:             "DELETE",
		PathPattern:        "/api/v1/machine/{machineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDeleteMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDeleteMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDeleteMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDeleteRoute headscale service delete route API
*/
func (a *Client) HeadscaleServiceDeleteRoute(params *HeadscaleServiceDeleteRouteParams, opts ...ClientOption) (*HeadscaleServiceDeleteRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDeleteRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DeleteRoute",
		Method:             "DELETE",
		PathPattern:        "/api/v1/routes/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDeleteRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDeleteRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDeleteRouteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDeleteUser headscale service delete user API
*/
func (a *Client) HeadscaleServiceDeleteUser(params *HeadscaleServiceDeleteUserParams, opts ...ClientOption) (*HeadscaleServiceDeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DeleteUser",
		Method:             "DELETE",
		PathPattern:        "/api/v1/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceDisableRoute headscale service disable route API
*/
func (a *Client) HeadscaleServiceDisableRoute(params *HeadscaleServiceDisableRouteParams, opts ...ClientOption) (*HeadscaleServiceDisableRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceDisableRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_DisableRoute",
		Method:             "POST",
		PathPattern:        "/api/v1/routes/{routeId}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceDisableRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceDisableRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceDisableRouteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceEnableRoute headscale service enable route API
*/
func (a *Client) HeadscaleServiceEnableRoute(params *HeadscaleServiceEnableRouteParams, opts ...ClientOption) (*HeadscaleServiceEnableRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceEnableRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_EnableRoute",
		Method:             "POST",
		PathPattern:        "/api/v1/routes/{routeId}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceEnableRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceEnableRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceEnableRouteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceExpireAPIKey headscale service expire Api key API
*/
func (a *Client) HeadscaleServiceExpireAPIKey(params *HeadscaleServiceExpireAPIKeyParams, opts ...ClientOption) (*HeadscaleServiceExpireAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceExpireAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ExpireApiKey",
		Method:             "POST",
		PathPattern:        "/api/v1/apikey/expire",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceExpireAPIKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceExpireAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceExpireAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceExpireMachine headscale service expire machine API
*/
func (a *Client) HeadscaleServiceExpireMachine(params *HeadscaleServiceExpireMachineParams, opts ...ClientOption) (*HeadscaleServiceExpireMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceExpireMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ExpireMachine",
		Method:             "POST",
		PathPattern:        "/api/v1/machine/{machineId}/expire",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceExpireMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceExpireMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceExpireMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceExpirePreAuthKey headscale service expire pre auth key API
*/
func (a *Client) HeadscaleServiceExpirePreAuthKey(params *HeadscaleServiceExpirePreAuthKeyParams, opts ...ClientOption) (*HeadscaleServiceExpirePreAuthKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceExpirePreAuthKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ExpirePreAuthKey",
		Method:             "POST",
		PathPattern:        "/api/v1/preauthkey/expire",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceExpirePreAuthKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceExpirePreAuthKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceExpirePreAuthKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceGetMachine headscale service get machine API
*/
func (a *Client) HeadscaleServiceGetMachine(params *HeadscaleServiceGetMachineParams, opts ...ClientOption) (*HeadscaleServiceGetMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceGetMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_GetMachine",
		Method:             "GET",
		PathPattern:        "/api/v1/machine/{machineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceGetMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceGetMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceGetMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceGetMachineRoutes headscale service get machine routes API
*/
func (a *Client) HeadscaleServiceGetMachineRoutes(params *HeadscaleServiceGetMachineRoutesParams, opts ...ClientOption) (*HeadscaleServiceGetMachineRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceGetMachineRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_GetMachineRoutes",
		Method:             "GET",
		PathPattern:        "/api/v1/machine/{machineId}/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceGetMachineRoutesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceGetMachineRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceGetMachineRoutesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceGetRoutes routes start
*/
func (a *Client) HeadscaleServiceGetRoutes(params *HeadscaleServiceGetRoutesParams, opts ...ClientOption) (*HeadscaleServiceGetRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceGetRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_GetRoutes",
		Method:             "GET",
		PathPattern:        "/api/v1/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceGetRoutesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceGetRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceGetRoutesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceGetUser users start
*/
func (a *Client) HeadscaleServiceGetUser(params *HeadscaleServiceGetUserParams, opts ...ClientOption) (*HeadscaleServiceGetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_GetUser",
		Method:             "GET",
		PathPattern:        "/api/v1/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceGetUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceGetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceGetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceListAPIKeys headscale service list Api keys API
*/
func (a *Client) HeadscaleServiceListAPIKeys(params *HeadscaleServiceListAPIKeysParams, opts ...ClientOption) (*HeadscaleServiceListAPIKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceListAPIKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ListApiKeys",
		Method:             "GET",
		PathPattern:        "/api/v1/apikey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceListAPIKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceListAPIKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceListAPIKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceListMachines headscale service list machines API
*/
func (a *Client) HeadscaleServiceListMachines(params *HeadscaleServiceListMachinesParams, opts ...ClientOption) (*HeadscaleServiceListMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceListMachinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ListMachines",
		Method:             "GET",
		PathPattern:        "/api/v1/machine",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceListMachinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceListMachinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceListMachinesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceListPreAuthKeys headscale service list pre auth keys API
*/
func (a *Client) HeadscaleServiceListPreAuthKeys(params *HeadscaleServiceListPreAuthKeysParams, opts ...ClientOption) (*HeadscaleServiceListPreAuthKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceListPreAuthKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ListPreAuthKeys",
		Method:             "GET",
		PathPattern:        "/api/v1/preauthkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceListPreAuthKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceListPreAuthKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceListPreAuthKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceListUsers headscale service list users API
*/
func (a *Client) HeadscaleServiceListUsers(params *HeadscaleServiceListUsersParams, opts ...ClientOption) (*HeadscaleServiceListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceListUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_ListUsers",
		Method:             "GET",
		PathPattern:        "/api/v1/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceListUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceListUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceListUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceMoveMachine headscale service move machine API
*/
func (a *Client) HeadscaleServiceMoveMachine(params *HeadscaleServiceMoveMachineParams, opts ...ClientOption) (*HeadscaleServiceMoveMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceMoveMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_MoveMachine",
		Method:             "POST",
		PathPattern:        "/api/v1/machine/{machineId}/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceMoveMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceMoveMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceMoveMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceRegisterMachine headscale service register machine API
*/
func (a *Client) HeadscaleServiceRegisterMachine(params *HeadscaleServiceRegisterMachineParams, opts ...ClientOption) (*HeadscaleServiceRegisterMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceRegisterMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_RegisterMachine",
		Method:             "POST",
		PathPattern:        "/api/v1/machine/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceRegisterMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceRegisterMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceRegisterMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceRenameMachine headscale service rename machine API
*/
func (a *Client) HeadscaleServiceRenameMachine(params *HeadscaleServiceRenameMachineParams, opts ...ClientOption) (*HeadscaleServiceRenameMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceRenameMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_RenameMachine",
		Method:             "POST",
		PathPattern:        "/api/v1/machine/{machineId}/rename/{newName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceRenameMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceRenameMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceRenameMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceRenameUser headscale service rename user API
*/
func (a *Client) HeadscaleServiceRenameUser(params *HeadscaleServiceRenameUserParams, opts ...ClientOption) (*HeadscaleServiceRenameUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceRenameUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_RenameUser",
		Method:             "POST",
		PathPattern:        "/api/v1/user/{oldName}/rename/{newName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceRenameUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceRenameUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceRenameUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
HeadscaleServiceSetTags headscale service set tags API
*/
func (a *Client) HeadscaleServiceSetTags(params *HeadscaleServiceSetTagsParams, opts ...ClientOption) (*HeadscaleServiceSetTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadscaleServiceSetTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadscaleService_SetTags",
		Method:             "POST",
		PathPattern:        "/api/v1/machine/{machineId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadscaleServiceSetTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadscaleServiceSetTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HeadscaleServiceSetTagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
