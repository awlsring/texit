// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1CreatePreAuthKeyResponse v1 create pre auth key response
//
// swagger:model v1CreatePreAuthKeyResponse
type V1CreatePreAuthKeyResponse struct {

	// pre auth key
	PreAuthKey *V1PreAuthKey `json:"preAuthKey,omitempty"`
}

// Validate validates this v1 create pre auth key response
func (m *V1CreatePreAuthKeyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreAuthKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CreatePreAuthKeyResponse) validatePreAuthKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PreAuthKey) { // not required
		return nil
	}

	if m.PreAuthKey != nil {
		if err := m.PreAuthKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preAuthKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preAuthKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 create pre auth key response based on the context it is used
func (m *V1CreatePreAuthKeyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePreAuthKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1CreatePreAuthKeyResponse) contextValidatePreAuthKey(ctx context.Context, formats strfmt.Registry) error {

	if m.PreAuthKey != nil {
		if err := m.PreAuthKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preAuthKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preAuthKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1CreatePreAuthKeyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1CreatePreAuthKeyResponse) UnmarshalBinary(b []byte) error {
	var res V1CreatePreAuthKeyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
