// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1RegisterMethod v1 register method
//
// swagger:model v1RegisterMethod
type V1RegisterMethod string

func NewV1RegisterMethod(value V1RegisterMethod) *V1RegisterMethod {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1RegisterMethod.
func (m V1RegisterMethod) Pointer() *V1RegisterMethod {
	return &m
}

const (

	// V1RegisterMethodREGISTERMETHODUNSPECIFIED captures enum value "REGISTER_METHOD_UNSPECIFIED"
	V1RegisterMethodREGISTERMETHODUNSPECIFIED V1RegisterMethod = "REGISTER_METHOD_UNSPECIFIED"

	// V1RegisterMethodREGISTERMETHODAUTHKEY captures enum value "REGISTER_METHOD_AUTH_KEY"
	V1RegisterMethodREGISTERMETHODAUTHKEY V1RegisterMethod = "REGISTER_METHOD_AUTH_KEY"

	// V1RegisterMethodREGISTERMETHODCLI captures enum value "REGISTER_METHOD_CLI"
	V1RegisterMethodREGISTERMETHODCLI V1RegisterMethod = "REGISTER_METHOD_CLI"

	// V1RegisterMethodREGISTERMETHODOIDC captures enum value "REGISTER_METHOD_OIDC"
	V1RegisterMethodREGISTERMETHODOIDC V1RegisterMethod = "REGISTER_METHOD_OIDC"
)

// for schema
var v1RegisterMethodEnum []interface{}

func init() {
	var res []V1RegisterMethod
	if err := json.Unmarshal([]byte(`["REGISTER_METHOD_UNSPECIFIED","REGISTER_METHOD_AUTH_KEY","REGISTER_METHOD_CLI","REGISTER_METHOD_OIDC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1RegisterMethodEnum = append(v1RegisterMethodEnum, v)
	}
}

func (m V1RegisterMethod) validateV1RegisterMethodEnum(path, location string, value V1RegisterMethod) error {
	if err := validate.EnumCase(path, location, value, v1RegisterMethodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 register method
func (m V1RegisterMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1RegisterMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 register method based on context it is used
func (m V1RegisterMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
