// Code generated by ogen, DO NOT EDIT.

package texit

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DeprovisionNodeParams is parameters of DeprovisionNode operation.
type DeprovisionNodeParams struct {
	// A node's identifier.
	Identifier string
}

func unpackDeprovisionNodeParams(packed middleware.Parameters) (params DeprovisionNodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "identifier",
			In:   "path",
		}
		params.Identifier = packed[key].(string)
	}
	return params
}

func decodeDeprovisionNodeParams(args [1]string, argsEscaped bool, r *http.Request) (params DeprovisionNodeParams, _ error) {
	// Decode path: identifier.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identifier",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Identifier = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    8,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.Identifier)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identifier",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DescribeNodeParams is parameters of DescribeNode operation.
type DescribeNodeParams struct {
	// A node's identifier.
	Identifier string
}

func unpackDescribeNodeParams(packed middleware.Parameters) (params DescribeNodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "identifier",
			In:   "path",
		}
		params.Identifier = packed[key].(string)
	}
	return params
}

func decodeDescribeNodeParams(args [1]string, argsEscaped bool, r *http.Request) (params DescribeNodeParams, _ error) {
	// Decode path: identifier.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identifier",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Identifier = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    8,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.Identifier)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identifier",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DescribeProviderParams is parameters of DescribeProvider operation.
type DescribeProviderParams struct {
	// The name of the provider.
	Name string
}

func unpackDescribeProviderParams(packed middleware.Parameters) (params DescribeProviderParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeDescribeProviderParams(args [1]string, argsEscaped bool, r *http.Request) (params DescribeProviderParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    36,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.Name)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DescribeTailnetParams is parameters of DescribeTailnet operation.
type DescribeTailnetParams struct {
	// .
	Name string
}

func unpackDescribeTailnetParams(packed middleware.Parameters) (params DescribeTailnetParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeDescribeTailnetParams(args [1]string, argsEscaped bool, r *http.Request) (params DescribeTailnetParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.Name)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetExecutionParams is parameters of GetExecution operation.
type GetExecutionParams struct {
	// A node's identifier.
	Identifier string
}

func unpackGetExecutionParams(packed middleware.Parameters) (params GetExecutionParams) {
	{
		key := middleware.ParameterKey{
			Name: "identifier",
			In:   "path",
		}
		params.Identifier = packed[key].(string)
	}
	return params
}

func decodeGetExecutionParams(args [1]string, argsEscaped bool, r *http.Request) (params GetExecutionParams, _ error) {
	// Decode path: identifier.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identifier",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Identifier = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    40,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.Identifier)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identifier",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StartNodeParams is parameters of StartNode operation.
type StartNodeParams struct {
	// A node's identifier.
	Identifier string
}

func unpackStartNodeParams(packed middleware.Parameters) (params StartNodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "identifier",
			In:   "path",
		}
		params.Identifier = packed[key].(string)
	}
	return params
}

func decodeStartNodeParams(args [1]string, argsEscaped bool, r *http.Request) (params StartNodeParams, _ error) {
	// Decode path: identifier.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identifier",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Identifier = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    8,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.Identifier)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identifier",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StopNodeParams is parameters of StopNode operation.
type StopNodeParams struct {
	// A node's identifier.
	Identifier string
}

func unpackStopNodeParams(packed middleware.Parameters) (params StopNodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "identifier",
			In:   "path",
		}
		params.Identifier = packed[key].(string)
	}
	return params
}

func decodeStopNodeParams(args [1]string, argsEscaped bool, r *http.Request) (params StopNodeParams, _ error) {
	// Decode path: identifier.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identifier",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Identifier = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    8,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.Identifier)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identifier",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
