// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	workflow "github.com/awlsring/texit/internal/pkg/domain/workflow"
)

// MockWorkflow_gateway is an autogenerated mock type for the Workflow type
type MockWorkflow_gateway struct {
	mock.Mock
}

type MockWorkflow_gateway_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkflow_gateway) EXPECT() *MockWorkflow_gateway_Expecter {
	return &MockWorkflow_gateway_Expecter{mock: &_m.Mock}
}

// DeprovisionNode provides a mock function with given fields: ctx, input
func (_m *MockWorkflow_gateway) DeprovisionNode(ctx context.Context, input *workflow.DeprovisionNodeInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for DeprovisionNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.DeprovisionNodeInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkflow_gateway_DeprovisionNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeprovisionNode'
type MockWorkflow_gateway_DeprovisionNode_Call struct {
	*mock.Call
}

// DeprovisionNode is a helper method to define mock.On call
//   - ctx context.Context
//   - input *workflow.DeprovisionNodeInput
func (_e *MockWorkflow_gateway_Expecter) DeprovisionNode(ctx interface{}, input interface{}) *MockWorkflow_gateway_DeprovisionNode_Call {
	return &MockWorkflow_gateway_DeprovisionNode_Call{Call: _e.mock.On("DeprovisionNode", ctx, input)}
}

func (_c *MockWorkflow_gateway_DeprovisionNode_Call) Run(run func(ctx context.Context, input *workflow.DeprovisionNodeInput)) *MockWorkflow_gateway_DeprovisionNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.DeprovisionNodeInput))
	})
	return _c
}

func (_c *MockWorkflow_gateway_DeprovisionNode_Call) Return(_a0 error) *MockWorkflow_gateway_DeprovisionNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkflow_gateway_DeprovisionNode_Call) RunAndReturn(run func(context.Context, *workflow.DeprovisionNodeInput) error) *MockWorkflow_gateway_DeprovisionNode_Call {
	_c.Call.Return(run)
	return _c
}

// ProvisionNode provides a mock function with given fields: ctx, input
func (_m *MockWorkflow_gateway) ProvisionNode(ctx context.Context, input *workflow.ProvisionNodeInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.ProvisionNodeInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkflow_gateway_ProvisionNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvisionNode'
type MockWorkflow_gateway_ProvisionNode_Call struct {
	*mock.Call
}

// ProvisionNode is a helper method to define mock.On call
//   - ctx context.Context
//   - input *workflow.ProvisionNodeInput
func (_e *MockWorkflow_gateway_Expecter) ProvisionNode(ctx interface{}, input interface{}) *MockWorkflow_gateway_ProvisionNode_Call {
	return &MockWorkflow_gateway_ProvisionNode_Call{Call: _e.mock.On("ProvisionNode", ctx, input)}
}

func (_c *MockWorkflow_gateway_ProvisionNode_Call) Run(run func(ctx context.Context, input *workflow.ProvisionNodeInput)) *MockWorkflow_gateway_ProvisionNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.ProvisionNodeInput))
	})
	return _c
}

func (_c *MockWorkflow_gateway_ProvisionNode_Call) Return(_a0 error) *MockWorkflow_gateway_ProvisionNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkflow_gateway_ProvisionNode_Call) RunAndReturn(run func(context.Context, *workflow.ProvisionNodeInput) error) *MockWorkflow_gateway_ProvisionNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkflow_gateway creates a new instance of MockWorkflow_gateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkflow_gateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkflow_gateway {
	mock := &MockWorkflow_gateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
