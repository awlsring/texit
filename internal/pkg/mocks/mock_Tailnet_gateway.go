// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tailnet "github.com/awlsring/texit/internal/pkg/domain/tailnet"
)

// MockTailnet_gateway is an autogenerated mock type for the Tailnet type
type MockTailnet_gateway struct {
	mock.Mock
}

type MockTailnet_gateway_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTailnet_gateway) EXPECT() *MockTailnet_gateway_Expecter {
	return &MockTailnet_gateway_Expecter{mock: &_m.Mock}
}

// CreatePreauthKey provides a mock function with given fields: _a0, _a1
func (_m *MockTailnet_gateway) CreatePreauthKey(_a0 context.Context, _a1 bool) (tailnet.PreauthKey, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePreauthKey")
	}

	var r0 tailnet.PreauthKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (tailnet.PreauthKey, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) tailnet.PreauthKey); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tailnet.PreauthKey)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTailnet_gateway_CreatePreauthKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePreauthKey'
type MockTailnet_gateway_CreatePreauthKey_Call struct {
	*mock.Call
}

// CreatePreauthKey is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 bool
func (_e *MockTailnet_gateway_Expecter) CreatePreauthKey(_a0 interface{}, _a1 interface{}) *MockTailnet_gateway_CreatePreauthKey_Call {
	return &MockTailnet_gateway_CreatePreauthKey_Call{Call: _e.mock.On("CreatePreauthKey", _a0, _a1)}
}

func (_c *MockTailnet_gateway_CreatePreauthKey_Call) Run(run func(_a0 context.Context, _a1 bool)) *MockTailnet_gateway_CreatePreauthKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockTailnet_gateway_CreatePreauthKey_Call) Return(_a0 tailnet.PreauthKey, _a1 error) *MockTailnet_gateway_CreatePreauthKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTailnet_gateway_CreatePreauthKey_Call) RunAndReturn(run func(context.Context, bool) (tailnet.PreauthKey, error)) *MockTailnet_gateway_CreatePreauthKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDevice provides a mock function with given fields: _a0, _a1
func (_m *MockTailnet_gateway) DeleteDevice(_a0 context.Context, _a1 tailnet.DeviceIdentifier) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.DeviceIdentifier) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTailnet_gateway_DeleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDevice'
type MockTailnet_gateway_DeleteDevice_Call struct {
	*mock.Call
}

// DeleteDevice is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 tailnet.DeviceIdentifier
func (_e *MockTailnet_gateway_Expecter) DeleteDevice(_a0 interface{}, _a1 interface{}) *MockTailnet_gateway_DeleteDevice_Call {
	return &MockTailnet_gateway_DeleteDevice_Call{Call: _e.mock.On("DeleteDevice", _a0, _a1)}
}

func (_c *MockTailnet_gateway_DeleteDevice_Call) Run(run func(_a0 context.Context, _a1 tailnet.DeviceIdentifier)) *MockTailnet_gateway_DeleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tailnet.DeviceIdentifier))
	})
	return _c
}

func (_c *MockTailnet_gateway_DeleteDevice_Call) Return(_a0 error) *MockTailnet_gateway_DeleteDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTailnet_gateway_DeleteDevice_Call) RunAndReturn(run func(context.Context, tailnet.DeviceIdentifier) error) *MockTailnet_gateway_DeleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePreauthKey provides a mock function with given fields: _a0, _a1
func (_m *MockTailnet_gateway) DeletePreauthKey(_a0 context.Context, _a1 tailnet.PreauthKey) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeletePreauthKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.PreauthKey) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTailnet_gateway_DeletePreauthKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePreauthKey'
type MockTailnet_gateway_DeletePreauthKey_Call struct {
	*mock.Call
}

// DeletePreauthKey is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 tailnet.PreauthKey
func (_e *MockTailnet_gateway_Expecter) DeletePreauthKey(_a0 interface{}, _a1 interface{}) *MockTailnet_gateway_DeletePreauthKey_Call {
	return &MockTailnet_gateway_DeletePreauthKey_Call{Call: _e.mock.On("DeletePreauthKey", _a0, _a1)}
}

func (_c *MockTailnet_gateway_DeletePreauthKey_Call) Run(run func(_a0 context.Context, _a1 tailnet.PreauthKey)) *MockTailnet_gateway_DeletePreauthKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tailnet.PreauthKey))
	})
	return _c
}

func (_c *MockTailnet_gateway_DeletePreauthKey_Call) Return(_a0 error) *MockTailnet_gateway_DeletePreauthKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTailnet_gateway_DeletePreauthKey_Call) RunAndReturn(run func(context.Context, tailnet.PreauthKey) error) *MockTailnet_gateway_DeletePreauthKey_Call {
	_c.Call.Return(run)
	return _c
}

// EnableExitNode provides a mock function with given fields: _a0, _a1
func (_m *MockTailnet_gateway) EnableExitNode(_a0 context.Context, _a1 tailnet.DeviceIdentifier) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EnableExitNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.DeviceIdentifier) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTailnet_gateway_EnableExitNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableExitNode'
type MockTailnet_gateway_EnableExitNode_Call struct {
	*mock.Call
}

// EnableExitNode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 tailnet.DeviceIdentifier
func (_e *MockTailnet_gateway_Expecter) EnableExitNode(_a0 interface{}, _a1 interface{}) *MockTailnet_gateway_EnableExitNode_Call {
	return &MockTailnet_gateway_EnableExitNode_Call{Call: _e.mock.On("EnableExitNode", _a0, _a1)}
}

func (_c *MockTailnet_gateway_EnableExitNode_Call) Run(run func(_a0 context.Context, _a1 tailnet.DeviceIdentifier)) *MockTailnet_gateway_EnableExitNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tailnet.DeviceIdentifier))
	})
	return _c
}

func (_c *MockTailnet_gateway_EnableExitNode_Call) Return(_a0 error) *MockTailnet_gateway_EnableExitNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTailnet_gateway_EnableExitNode_Call) RunAndReturn(run func(context.Context, tailnet.DeviceIdentifier) error) *MockTailnet_gateway_EnableExitNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceId provides a mock function with given fields: _a0, _a1
func (_m *MockTailnet_gateway) GetDeviceId(_a0 context.Context, _a1 tailnet.DeviceName) (tailnet.DeviceIdentifier, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceId")
	}

	var r0 tailnet.DeviceIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.DeviceName) (tailnet.DeviceIdentifier, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.DeviceName) tailnet.DeviceIdentifier); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tailnet.DeviceIdentifier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, tailnet.DeviceName) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTailnet_gateway_GetDeviceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceId'
type MockTailnet_gateway_GetDeviceId_Call struct {
	*mock.Call
}

// GetDeviceId is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 tailnet.DeviceName
func (_e *MockTailnet_gateway_Expecter) GetDeviceId(_a0 interface{}, _a1 interface{}) *MockTailnet_gateway_GetDeviceId_Call {
	return &MockTailnet_gateway_GetDeviceId_Call{Call: _e.mock.On("GetDeviceId", _a0, _a1)}
}

func (_c *MockTailnet_gateway_GetDeviceId_Call) Run(run func(_a0 context.Context, _a1 tailnet.DeviceName)) *MockTailnet_gateway_GetDeviceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tailnet.DeviceName))
	})
	return _c
}

func (_c *MockTailnet_gateway_GetDeviceId_Call) Return(_a0 tailnet.DeviceIdentifier, _a1 error) *MockTailnet_gateway_GetDeviceId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTailnet_gateway_GetDeviceId_Call) RunAndReturn(run func(context.Context, tailnet.DeviceName) (tailnet.DeviceIdentifier, error)) *MockTailnet_gateway_GetDeviceId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTailnet_gateway creates a new instance of MockTailnet_gateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTailnet_gateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTailnet_gateway {
	mock := &MockTailnet_gateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
