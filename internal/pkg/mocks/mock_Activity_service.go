// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	node "github.com/awlsring/texit/internal/pkg/domain/node"
	mock "github.com/stretchr/testify/mock"

	provider "github.com/awlsring/texit/internal/pkg/domain/provider"

	tailnet "github.com/awlsring/texit/internal/pkg/domain/tailnet"

	workflow "github.com/awlsring/texit/internal/pkg/domain/workflow"
)

// MockActivity_service is an autogenerated mock type for the Activity type
type MockActivity_service struct {
	mock.Mock
}

type MockActivity_service_Expecter struct {
	mock *mock.Mock
}

func (_m *MockActivity_service) EXPECT() *MockActivity_service_Expecter {
	return &MockActivity_service_Expecter{mock: &_m.Mock}
}

// CloseExecution provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockActivity_service) CloseExecution(_a0 context.Context, _a1 workflow.ExecutionIdentifier, _a2 workflow.Status, _a3 workflow.ExecutionResult) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for CloseExecution")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workflow.ExecutionIdentifier, workflow.Status, workflow.ExecutionResult) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivity_service_CloseExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseExecution'
type MockActivity_service_CloseExecution_Call struct {
	*mock.Call
}

// CloseExecution is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 workflow.ExecutionIdentifier
//   - _a2 workflow.Status
//   - _a3 workflow.ExecutionResult
func (_e *MockActivity_service_Expecter) CloseExecution(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockActivity_service_CloseExecution_Call {
	return &MockActivity_service_CloseExecution_Call{Call: _e.mock.On("CloseExecution", _a0, _a1, _a2, _a3)}
}

func (_c *MockActivity_service_CloseExecution_Call) Run(run func(_a0 context.Context, _a1 workflow.ExecutionIdentifier, _a2 workflow.Status, _a3 workflow.ExecutionResult)) *MockActivity_service_CloseExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workflow.ExecutionIdentifier), args[2].(workflow.Status), args[3].(workflow.ExecutionResult))
	})
	return _c
}

func (_c *MockActivity_service_CloseExecution_Call) Return(_a0 error) *MockActivity_service_CloseExecution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivity_service_CloseExecution_Call) RunAndReturn(run func(context.Context, workflow.ExecutionIdentifier, workflow.Status, workflow.ExecutionResult) error) *MockActivity_service_CloseExecution_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNode provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7
func (_m *MockActivity_service) CreateNode(_a0 context.Context, _a1 provider.Identifier, _a2 tailnet.ControlServer, _a3 node.Identifier, _a4 tailnet.DeviceName, _a5 provider.Location, _a6 tailnet.PreauthKey, _a7 node.Size) (node.PlatformIdentifier, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)

	if len(ret) == 0 {
		panic("no return value specified for CreateNode")
	}

	var r0 node.PlatformIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provider.Identifier, tailnet.ControlServer, node.Identifier, tailnet.DeviceName, provider.Location, tailnet.PreauthKey, node.Size) (node.PlatformIdentifier, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provider.Identifier, tailnet.ControlServer, node.Identifier, tailnet.DeviceName, provider.Location, tailnet.PreauthKey, node.Size) node.PlatformIdentifier); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	} else {
		r0 = ret.Get(0).(node.PlatformIdentifier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, provider.Identifier, tailnet.ControlServer, node.Identifier, tailnet.DeviceName, provider.Location, tailnet.PreauthKey, node.Size) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivity_service_CreateNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNode'
type MockActivity_service_CreateNode_Call struct {
	*mock.Call
}

// CreateNode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 provider.Identifier
//   - _a2 tailnet.ControlServer
//   - _a3 node.Identifier
//   - _a4 tailnet.DeviceName
//   - _a5 provider.Location
//   - _a6 tailnet.PreauthKey
//   - _a7 node.Size
func (_e *MockActivity_service_Expecter) CreateNode(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}, _a7 interface{}) *MockActivity_service_CreateNode_Call {
	return &MockActivity_service_CreateNode_Call{Call: _e.mock.On("CreateNode", _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)}
}

func (_c *MockActivity_service_CreateNode_Call) Run(run func(_a0 context.Context, _a1 provider.Identifier, _a2 tailnet.ControlServer, _a3 node.Identifier, _a4 tailnet.DeviceName, _a5 provider.Location, _a6 tailnet.PreauthKey, _a7 node.Size)) *MockActivity_service_CreateNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provider.Identifier), args[2].(tailnet.ControlServer), args[3].(node.Identifier), args[4].(tailnet.DeviceName), args[5].(provider.Location), args[6].(tailnet.PreauthKey), args[7].(node.Size))
	})
	return _c
}

func (_c *MockActivity_service_CreateNode_Call) Return(_a0 node.PlatformIdentifier, _a1 error) *MockActivity_service_CreateNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivity_service_CreateNode_Call) RunAndReturn(run func(context.Context, provider.Identifier, tailnet.ControlServer, node.Identifier, tailnet.DeviceName, provider.Location, tailnet.PreauthKey, node.Size) (node.PlatformIdentifier, error)) *MockActivity_service_CreateNode_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNodeRecord provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7
func (_m *MockActivity_service) CreateNodeRecord(_a0 context.Context, _a1 node.Identifier, _a2 provider.Identifier, _a3 provider.Location, _a4 tailnet.Identifier, _a5 tailnet.DeviceName, _a6 node.Size, _a7 bool) (*node.Node, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)

	if len(ret) == 0 {
		panic("no return value specified for CreateNodeRecord")
	}

	var r0 *node.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier, provider.Identifier, provider.Location, tailnet.Identifier, tailnet.DeviceName, node.Size, bool) (*node.Node, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	}
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier, provider.Identifier, provider.Location, tailnet.Identifier, tailnet.DeviceName, node.Size, bool) *node.Node); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, node.Identifier, provider.Identifier, provider.Location, tailnet.Identifier, tailnet.DeviceName, node.Size, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivity_service_CreateNodeRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNodeRecord'
type MockActivity_service_CreateNodeRecord_Call struct {
	*mock.Call
}

// CreateNodeRecord is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 node.Identifier
//   - _a2 provider.Identifier
//   - _a3 provider.Location
//   - _a4 tailnet.Identifier
//   - _a5 tailnet.DeviceName
//   - _a6 node.Size
//   - _a7 bool
func (_e *MockActivity_service_Expecter) CreateNodeRecord(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}, _a7 interface{}) *MockActivity_service_CreateNodeRecord_Call {
	return &MockActivity_service_CreateNodeRecord_Call{Call: _e.mock.On("CreateNodeRecord", _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)}
}

func (_c *MockActivity_service_CreateNodeRecord_Call) Run(run func(_a0 context.Context, _a1 node.Identifier, _a2 provider.Identifier, _a3 provider.Location, _a4 tailnet.Identifier, _a5 tailnet.DeviceName, _a6 node.Size, _a7 bool)) *MockActivity_service_CreateNodeRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(node.Identifier), args[2].(provider.Identifier), args[3].(provider.Location), args[4].(tailnet.Identifier), args[5].(tailnet.DeviceName), args[6].(node.Size), args[7].(bool))
	})
	return _c
}

func (_c *MockActivity_service_CreateNodeRecord_Call) Return(_a0 *node.Node, _a1 error) *MockActivity_service_CreateNodeRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivity_service_CreateNodeRecord_Call) RunAndReturn(run func(context.Context, node.Identifier, provider.Identifier, provider.Location, tailnet.Identifier, tailnet.DeviceName, node.Size, bool) (*node.Node, error)) *MockActivity_service_CreateNodeRecord_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePreauthKey provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockActivity_service) CreatePreauthKey(_a0 context.Context, _a1 tailnet.Identifier, _a2 bool) (tailnet.PreauthKey, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreatePreauthKey")
	}

	var r0 tailnet.PreauthKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.Identifier, bool) (tailnet.PreauthKey, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.Identifier, bool) tailnet.PreauthKey); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(tailnet.PreauthKey)
	}

	if rf, ok := ret.Get(1).(func(context.Context, tailnet.Identifier, bool) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivity_service_CreatePreauthKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePreauthKey'
type MockActivity_service_CreatePreauthKey_Call struct {
	*mock.Call
}

// CreatePreauthKey is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 tailnet.Identifier
//   - _a2 bool
func (_e *MockActivity_service_Expecter) CreatePreauthKey(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockActivity_service_CreatePreauthKey_Call {
	return &MockActivity_service_CreatePreauthKey_Call{Call: _e.mock.On("CreatePreauthKey", _a0, _a1, _a2)}
}

func (_c *MockActivity_service_CreatePreauthKey_Call) Run(run func(_a0 context.Context, _a1 tailnet.Identifier, _a2 bool)) *MockActivity_service_CreatePreauthKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tailnet.Identifier), args[2].(bool))
	})
	return _c
}

func (_c *MockActivity_service_CreatePreauthKey_Call) Return(_a0 tailnet.PreauthKey, _a1 error) *MockActivity_service_CreatePreauthKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivity_service_CreatePreauthKey_Call) RunAndReturn(run func(context.Context, tailnet.Identifier, bool) (tailnet.PreauthKey, error)) *MockActivity_service_CreatePreauthKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNode provides a mock function with given fields: _a0, _a1
func (_m *MockActivity_service) DeleteNode(_a0 context.Context, _a1 node.Identifier) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivity_service_DeleteNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNode'
type MockActivity_service_DeleteNode_Call struct {
	*mock.Call
}

// DeleteNode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 node.Identifier
func (_e *MockActivity_service_Expecter) DeleteNode(_a0 interface{}, _a1 interface{}) *MockActivity_service_DeleteNode_Call {
	return &MockActivity_service_DeleteNode_Call{Call: _e.mock.On("DeleteNode", _a0, _a1)}
}

func (_c *MockActivity_service_DeleteNode_Call) Run(run func(_a0 context.Context, _a1 node.Identifier)) *MockActivity_service_DeleteNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(node.Identifier))
	})
	return _c
}

func (_c *MockActivity_service_DeleteNode_Call) Return(_a0 error) *MockActivity_service_DeleteNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivity_service_DeleteNode_Call) RunAndReturn(run func(context.Context, node.Identifier) error) *MockActivity_service_DeleteNode_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNodeRecord provides a mock function with given fields: _a0, _a1
func (_m *MockActivity_service) DeleteNodeRecord(_a0 context.Context, _a1 node.Identifier) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNodeRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivity_service_DeleteNodeRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNodeRecord'
type MockActivity_service_DeleteNodeRecord_Call struct {
	*mock.Call
}

// DeleteNodeRecord is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 node.Identifier
func (_e *MockActivity_service_Expecter) DeleteNodeRecord(_a0 interface{}, _a1 interface{}) *MockActivity_service_DeleteNodeRecord_Call {
	return &MockActivity_service_DeleteNodeRecord_Call{Call: _e.mock.On("DeleteNodeRecord", _a0, _a1)}
}

func (_c *MockActivity_service_DeleteNodeRecord_Call) Run(run func(_a0 context.Context, _a1 node.Identifier)) *MockActivity_service_DeleteNodeRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(node.Identifier))
	})
	return _c
}

func (_c *MockActivity_service_DeleteNodeRecord_Call) Return(_a0 error) *MockActivity_service_DeleteNodeRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivity_service_DeleteNodeRecord_Call) RunAndReturn(run func(context.Context, node.Identifier) error) *MockActivity_service_DeleteNodeRecord_Call {
	_c.Call.Return(run)
	return _c
}

// EnableExitNode provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockActivity_service) EnableExitNode(_a0 context.Context, _a1 tailnet.Identifier, _a2 tailnet.DeviceIdentifier) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for EnableExitNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.Identifier, tailnet.DeviceIdentifier) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivity_service_EnableExitNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableExitNode'
type MockActivity_service_EnableExitNode_Call struct {
	*mock.Call
}

// EnableExitNode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 tailnet.Identifier
//   - _a2 tailnet.DeviceIdentifier
func (_e *MockActivity_service_Expecter) EnableExitNode(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockActivity_service_EnableExitNode_Call {
	return &MockActivity_service_EnableExitNode_Call{Call: _e.mock.On("EnableExitNode", _a0, _a1, _a2)}
}

func (_c *MockActivity_service_EnableExitNode_Call) Run(run func(_a0 context.Context, _a1 tailnet.Identifier, _a2 tailnet.DeviceIdentifier)) *MockActivity_service_EnableExitNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tailnet.Identifier), args[2].(tailnet.DeviceIdentifier))
	})
	return _c
}

func (_c *MockActivity_service_EnableExitNode_Call) Return(_a0 error) *MockActivity_service_EnableExitNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivity_service_EnableExitNode_Call) RunAndReturn(run func(context.Context, tailnet.Identifier, tailnet.DeviceIdentifier) error) *MockActivity_service_EnableExitNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceId provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockActivity_service) GetDeviceId(_a0 context.Context, _a1 tailnet.Identifier, _a2 tailnet.DeviceName) (tailnet.DeviceIdentifier, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceId")
	}

	var r0 tailnet.DeviceIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.Identifier, tailnet.DeviceName) (tailnet.DeviceIdentifier, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.Identifier, tailnet.DeviceName) tailnet.DeviceIdentifier); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(tailnet.DeviceIdentifier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, tailnet.Identifier, tailnet.DeviceName) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivity_service_GetDeviceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceId'
type MockActivity_service_GetDeviceId_Call struct {
	*mock.Call
}

// GetDeviceId is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 tailnet.Identifier
//   - _a2 tailnet.DeviceName
func (_e *MockActivity_service_Expecter) GetDeviceId(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockActivity_service_GetDeviceId_Call {
	return &MockActivity_service_GetDeviceId_Call{Call: _e.mock.On("GetDeviceId", _a0, _a1, _a2)}
}

func (_c *MockActivity_service_GetDeviceId_Call) Run(run func(_a0 context.Context, _a1 tailnet.Identifier, _a2 tailnet.DeviceName)) *MockActivity_service_GetDeviceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tailnet.Identifier), args[2].(tailnet.DeviceName))
	})
	return _c
}

func (_c *MockActivity_service_GetDeviceId_Call) Return(_a0 tailnet.DeviceIdentifier, _a1 error) *MockActivity_service_GetDeviceId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivity_service_GetDeviceId_Call) RunAndReturn(run func(context.Context, tailnet.Identifier, tailnet.DeviceName) (tailnet.DeviceIdentifier, error)) *MockActivity_service_GetDeviceId_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTailnetDevice provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockActivity_service) RemoveTailnetDevice(_a0 context.Context, _a1 tailnet.Identifier, _a2 tailnet.DeviceIdentifier) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTailnetDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tailnet.Identifier, tailnet.DeviceIdentifier) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivity_service_RemoveTailnetDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTailnetDevice'
type MockActivity_service_RemoveTailnetDevice_Call struct {
	*mock.Call
}

// RemoveTailnetDevice is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 tailnet.Identifier
//   - _a2 tailnet.DeviceIdentifier
func (_e *MockActivity_service_Expecter) RemoveTailnetDevice(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockActivity_service_RemoveTailnetDevice_Call {
	return &MockActivity_service_RemoveTailnetDevice_Call{Call: _e.mock.On("RemoveTailnetDevice", _a0, _a1, _a2)}
}

func (_c *MockActivity_service_RemoveTailnetDevice_Call) Run(run func(_a0 context.Context, _a1 tailnet.Identifier, _a2 tailnet.DeviceIdentifier)) *MockActivity_service_RemoveTailnetDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tailnet.Identifier), args[2].(tailnet.DeviceIdentifier))
	})
	return _c
}

func (_c *MockActivity_service_RemoveTailnetDevice_Call) Return(_a0 error) *MockActivity_service_RemoveTailnetDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivity_service_RemoveTailnetDevice_Call) RunAndReturn(run func(context.Context, tailnet.Identifier, tailnet.DeviceIdentifier) error) *MockActivity_service_RemoveTailnetDevice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNodeRecord provides a mock function with given fields: _a0, _a1
func (_m *MockActivity_service) UpdateNodeRecord(_a0 context.Context, _a1 *node.Node) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNodeRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *node.Node) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivity_service_UpdateNodeRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNodeRecord'
type MockActivity_service_UpdateNodeRecord_Call struct {
	*mock.Call
}

// UpdateNodeRecord is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *node.Node
func (_e *MockActivity_service_Expecter) UpdateNodeRecord(_a0 interface{}, _a1 interface{}) *MockActivity_service_UpdateNodeRecord_Call {
	return &MockActivity_service_UpdateNodeRecord_Call{Call: _e.mock.On("UpdateNodeRecord", _a0, _a1)}
}

func (_c *MockActivity_service_UpdateNodeRecord_Call) Run(run func(_a0 context.Context, _a1 *node.Node)) *MockActivity_service_UpdateNodeRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*node.Node))
	})
	return _c
}

func (_c *MockActivity_service_UpdateNodeRecord_Call) Return(_a0 error) *MockActivity_service_UpdateNodeRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivity_service_UpdateNodeRecord_Call) RunAndReturn(run func(context.Context, *node.Node) error) *MockActivity_service_UpdateNodeRecord_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockActivity_service creates a new instance of MockActivity_service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActivity_service(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockActivity_service {
	mock := &MockActivity_service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
