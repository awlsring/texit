// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	account "github.com/aws/aws-sdk-go-v2/service/account"

	mock "github.com/stretchr/testify/mock"
)

// MockAwsAccountClient_interfaces is an autogenerated mock type for the AwsAccountClient type
type MockAwsAccountClient_interfaces struct {
	mock.Mock
}

type MockAwsAccountClient_interfaces_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAwsAccountClient_interfaces) EXPECT() *MockAwsAccountClient_interfaces_Expecter {
	return &MockAwsAccountClient_interfaces_Expecter{mock: &_m.Mock}
}

// EnableRegion provides a mock function with given fields: ctx, params, optFns
func (_m *MockAwsAccountClient_interfaces) EnableRegion(ctx context.Context, params *account.EnableRegionInput, optFns ...func(*account.Options)) (*account.EnableRegionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableRegion")
	}

	var r0 *account.EnableRegionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.EnableRegionInput, ...func(*account.Options)) (*account.EnableRegionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.EnableRegionInput, ...func(*account.Options)) *account.EnableRegionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.EnableRegionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.EnableRegionInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAwsAccountClient_interfaces_EnableRegion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableRegion'
type MockAwsAccountClient_interfaces_EnableRegion_Call struct {
	*mock.Call
}

// EnableRegion is a helper method to define mock.On call
//   - ctx context.Context
//   - params *account.EnableRegionInput
//   - optFns ...func(*account.Options)
func (_e *MockAwsAccountClient_interfaces_Expecter) EnableRegion(ctx interface{}, params interface{}, optFns ...interface{}) *MockAwsAccountClient_interfaces_EnableRegion_Call {
	return &MockAwsAccountClient_interfaces_EnableRegion_Call{Call: _e.mock.On("EnableRegion",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockAwsAccountClient_interfaces_EnableRegion_Call) Run(run func(ctx context.Context, params *account.EnableRegionInput, optFns ...func(*account.Options))) *MockAwsAccountClient_interfaces_EnableRegion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*account.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*account.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*account.EnableRegionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockAwsAccountClient_interfaces_EnableRegion_Call) Return(_a0 *account.EnableRegionOutput, _a1 error) *MockAwsAccountClient_interfaces_EnableRegion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAwsAccountClient_interfaces_EnableRegion_Call) RunAndReturn(run func(context.Context, *account.EnableRegionInput, ...func(*account.Options)) (*account.EnableRegionOutput, error)) *MockAwsAccountClient_interfaces_EnableRegion_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegionOptStatus provides a mock function with given fields: ctx, params, optFns
func (_m *MockAwsAccountClient_interfaces) GetRegionOptStatus(ctx context.Context, params *account.GetRegionOptStatusInput, optFns ...func(*account.Options)) (*account.GetRegionOptStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegionOptStatus")
	}

	var r0 *account.GetRegionOptStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetRegionOptStatusInput, ...func(*account.Options)) (*account.GetRegionOptStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetRegionOptStatusInput, ...func(*account.Options)) *account.GetRegionOptStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.GetRegionOptStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.GetRegionOptStatusInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAwsAccountClient_interfaces_GetRegionOptStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegionOptStatus'
type MockAwsAccountClient_interfaces_GetRegionOptStatus_Call struct {
	*mock.Call
}

// GetRegionOptStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - params *account.GetRegionOptStatusInput
//   - optFns ...func(*account.Options)
func (_e *MockAwsAccountClient_interfaces_Expecter) GetRegionOptStatus(ctx interface{}, params interface{}, optFns ...interface{}) *MockAwsAccountClient_interfaces_GetRegionOptStatus_Call {
	return &MockAwsAccountClient_interfaces_GetRegionOptStatus_Call{Call: _e.mock.On("GetRegionOptStatus",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockAwsAccountClient_interfaces_GetRegionOptStatus_Call) Run(run func(ctx context.Context, params *account.GetRegionOptStatusInput, optFns ...func(*account.Options))) *MockAwsAccountClient_interfaces_GetRegionOptStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*account.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*account.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*account.GetRegionOptStatusInput), variadicArgs...)
	})
	return _c
}

func (_c *MockAwsAccountClient_interfaces_GetRegionOptStatus_Call) Return(_a0 *account.GetRegionOptStatusOutput, _a1 error) *MockAwsAccountClient_interfaces_GetRegionOptStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAwsAccountClient_interfaces_GetRegionOptStatus_Call) RunAndReturn(run func(context.Context, *account.GetRegionOptStatusInput, ...func(*account.Options)) (*account.GetRegionOptStatusOutput, error)) *MockAwsAccountClient_interfaces_GetRegionOptStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAwsAccountClient_interfaces creates a new instance of MockAwsAccountClient_interfaces. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAwsAccountClient_interfaces(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAwsAccountClient_interfaces {
	mock := &MockAwsAccountClient_interfaces{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
