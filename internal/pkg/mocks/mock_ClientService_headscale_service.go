// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	headscale_service "github.com/awlsring/texit/pkg/gen/headscale/v0.22.3/client/headscale_service"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// MockClientService_headscale_service is an autogenerated mock type for the ClientService type
type MockClientService_headscale_service struct {
	mock.Mock
}

type MockClientService_headscale_service_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService_headscale_service) EXPECT() *MockClientService_headscale_service_Expecter {
	return &MockClientService_headscale_service_Expecter{mock: &_m.Mock}
}

// HeadscaleServiceCreateAPIKey provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceCreateAPIKey(params *headscale_service.HeadscaleServiceCreateAPIKeyParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceCreateAPIKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceCreateAPIKey")
	}

	var r0 *headscale_service.HeadscaleServiceCreateAPIKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceCreateAPIKeyParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceCreateAPIKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceCreateAPIKeyParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceCreateAPIKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceCreateAPIKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceCreateAPIKeyParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceCreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceCreateAPIKey'
type MockClientService_headscale_service_HeadscaleServiceCreateAPIKey_Call struct {
	*mock.Call
}

// HeadscaleServiceCreateAPIKey is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceCreateAPIKeyParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceCreateAPIKey(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceCreateAPIKey_Call {
	return &MockClientService_headscale_service_HeadscaleServiceCreateAPIKey_Call{Call: _e.mock.On("HeadscaleServiceCreateAPIKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceCreateAPIKey_Call) Run(run func(params *headscale_service.HeadscaleServiceCreateAPIKeyParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceCreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceCreateAPIKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceCreateAPIKey_Call) Return(_a0 *headscale_service.HeadscaleServiceCreateAPIKeyOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceCreateAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceCreateAPIKey_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceCreateAPIKeyParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceCreateAPIKeyOK, error)) *MockClientService_headscale_service_HeadscaleServiceCreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceCreatePreAuthKey provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceCreatePreAuthKey(params *headscale_service.HeadscaleServiceCreatePreAuthKeyParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceCreatePreAuthKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceCreatePreAuthKey")
	}

	var r0 *headscale_service.HeadscaleServiceCreatePreAuthKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceCreatePreAuthKeyParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceCreatePreAuthKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceCreatePreAuthKeyParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceCreatePreAuthKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceCreatePreAuthKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceCreatePreAuthKeyParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceCreatePreAuthKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceCreatePreAuthKey'
type MockClientService_headscale_service_HeadscaleServiceCreatePreAuthKey_Call struct {
	*mock.Call
}

// HeadscaleServiceCreatePreAuthKey is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceCreatePreAuthKeyParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceCreatePreAuthKey(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceCreatePreAuthKey_Call {
	return &MockClientService_headscale_service_HeadscaleServiceCreatePreAuthKey_Call{Call: _e.mock.On("HeadscaleServiceCreatePreAuthKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceCreatePreAuthKey_Call) Run(run func(params *headscale_service.HeadscaleServiceCreatePreAuthKeyParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceCreatePreAuthKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceCreatePreAuthKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceCreatePreAuthKey_Call) Return(_a0 *headscale_service.HeadscaleServiceCreatePreAuthKeyOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceCreatePreAuthKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceCreatePreAuthKey_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceCreatePreAuthKeyParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceCreatePreAuthKeyOK, error)) *MockClientService_headscale_service_HeadscaleServiceCreatePreAuthKey_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceCreateUser provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceCreateUser(params *headscale_service.HeadscaleServiceCreateUserParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceCreateUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceCreateUser")
	}

	var r0 *headscale_service.HeadscaleServiceCreateUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceCreateUserParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceCreateUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceCreateUserParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceCreateUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceCreateUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceCreateUserParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceCreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceCreateUser'
type MockClientService_headscale_service_HeadscaleServiceCreateUser_Call struct {
	*mock.Call
}

// HeadscaleServiceCreateUser is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceCreateUserParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceCreateUser(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceCreateUser_Call {
	return &MockClientService_headscale_service_HeadscaleServiceCreateUser_Call{Call: _e.mock.On("HeadscaleServiceCreateUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceCreateUser_Call) Run(run func(params *headscale_service.HeadscaleServiceCreateUserParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceCreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceCreateUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceCreateUser_Call) Return(_a0 *headscale_service.HeadscaleServiceCreateUserOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceCreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceCreateUser_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceCreateUserParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceCreateUserOK, error)) *MockClientService_headscale_service_HeadscaleServiceCreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceDebugCreateMachine provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceDebugCreateMachine(params *headscale_service.HeadscaleServiceDebugCreateMachineParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDebugCreateMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceDebugCreateMachine")
	}

	var r0 *headscale_service.HeadscaleServiceDebugCreateMachineOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceDebugCreateMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDebugCreateMachineOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceDebugCreateMachineParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceDebugCreateMachineOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceDebugCreateMachineOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceDebugCreateMachineParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceDebugCreateMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceDebugCreateMachine'
type MockClientService_headscale_service_HeadscaleServiceDebugCreateMachine_Call struct {
	*mock.Call
}

// HeadscaleServiceDebugCreateMachine is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceDebugCreateMachineParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceDebugCreateMachine(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceDebugCreateMachine_Call {
	return &MockClientService_headscale_service_HeadscaleServiceDebugCreateMachine_Call{Call: _e.mock.On("HeadscaleServiceDebugCreateMachine",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDebugCreateMachine_Call) Run(run func(params *headscale_service.HeadscaleServiceDebugCreateMachineParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceDebugCreateMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceDebugCreateMachineParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDebugCreateMachine_Call) Return(_a0 *headscale_service.HeadscaleServiceDebugCreateMachineOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceDebugCreateMachine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDebugCreateMachine_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceDebugCreateMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDebugCreateMachineOK, error)) *MockClientService_headscale_service_HeadscaleServiceDebugCreateMachine_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceDeleteMachine provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceDeleteMachine(params *headscale_service.HeadscaleServiceDeleteMachineParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDeleteMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceDeleteMachine")
	}

	var r0 *headscale_service.HeadscaleServiceDeleteMachineOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceDeleteMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDeleteMachineOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceDeleteMachineParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceDeleteMachineOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceDeleteMachineOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceDeleteMachineParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceDeleteMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceDeleteMachine'
type MockClientService_headscale_service_HeadscaleServiceDeleteMachine_Call struct {
	*mock.Call
}

// HeadscaleServiceDeleteMachine is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceDeleteMachineParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceDeleteMachine(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceDeleteMachine_Call {
	return &MockClientService_headscale_service_HeadscaleServiceDeleteMachine_Call{Call: _e.mock.On("HeadscaleServiceDeleteMachine",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDeleteMachine_Call) Run(run func(params *headscale_service.HeadscaleServiceDeleteMachineParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceDeleteMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceDeleteMachineParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDeleteMachine_Call) Return(_a0 *headscale_service.HeadscaleServiceDeleteMachineOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceDeleteMachine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDeleteMachine_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceDeleteMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDeleteMachineOK, error)) *MockClientService_headscale_service_HeadscaleServiceDeleteMachine_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceDeleteRoute provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceDeleteRoute(params *headscale_service.HeadscaleServiceDeleteRouteParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDeleteRouteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceDeleteRoute")
	}

	var r0 *headscale_service.HeadscaleServiceDeleteRouteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceDeleteRouteParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDeleteRouteOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceDeleteRouteParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceDeleteRouteOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceDeleteRouteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceDeleteRouteParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceDeleteRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceDeleteRoute'
type MockClientService_headscale_service_HeadscaleServiceDeleteRoute_Call struct {
	*mock.Call
}

// HeadscaleServiceDeleteRoute is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceDeleteRouteParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceDeleteRoute(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceDeleteRoute_Call {
	return &MockClientService_headscale_service_HeadscaleServiceDeleteRoute_Call{Call: _e.mock.On("HeadscaleServiceDeleteRoute",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDeleteRoute_Call) Run(run func(params *headscale_service.HeadscaleServiceDeleteRouteParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceDeleteRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceDeleteRouteParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDeleteRoute_Call) Return(_a0 *headscale_service.HeadscaleServiceDeleteRouteOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceDeleteRoute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDeleteRoute_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceDeleteRouteParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDeleteRouteOK, error)) *MockClientService_headscale_service_HeadscaleServiceDeleteRoute_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceDeleteUser provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceDeleteUser(params *headscale_service.HeadscaleServiceDeleteUserParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDeleteUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceDeleteUser")
	}

	var r0 *headscale_service.HeadscaleServiceDeleteUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceDeleteUserParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDeleteUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceDeleteUserParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceDeleteUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceDeleteUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceDeleteUserParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceDeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceDeleteUser'
type MockClientService_headscale_service_HeadscaleServiceDeleteUser_Call struct {
	*mock.Call
}

// HeadscaleServiceDeleteUser is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceDeleteUserParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceDeleteUser(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceDeleteUser_Call {
	return &MockClientService_headscale_service_HeadscaleServiceDeleteUser_Call{Call: _e.mock.On("HeadscaleServiceDeleteUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDeleteUser_Call) Run(run func(params *headscale_service.HeadscaleServiceDeleteUserParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceDeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceDeleteUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDeleteUser_Call) Return(_a0 *headscale_service.HeadscaleServiceDeleteUserOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceDeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDeleteUser_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceDeleteUserParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDeleteUserOK, error)) *MockClientService_headscale_service_HeadscaleServiceDeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceDisableRoute provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceDisableRoute(params *headscale_service.HeadscaleServiceDisableRouteParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDisableRouteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceDisableRoute")
	}

	var r0 *headscale_service.HeadscaleServiceDisableRouteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceDisableRouteParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDisableRouteOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceDisableRouteParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceDisableRouteOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceDisableRouteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceDisableRouteParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceDisableRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceDisableRoute'
type MockClientService_headscale_service_HeadscaleServiceDisableRoute_Call struct {
	*mock.Call
}

// HeadscaleServiceDisableRoute is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceDisableRouteParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceDisableRoute(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceDisableRoute_Call {
	return &MockClientService_headscale_service_HeadscaleServiceDisableRoute_Call{Call: _e.mock.On("HeadscaleServiceDisableRoute",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDisableRoute_Call) Run(run func(params *headscale_service.HeadscaleServiceDisableRouteParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceDisableRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceDisableRouteParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDisableRoute_Call) Return(_a0 *headscale_service.HeadscaleServiceDisableRouteOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceDisableRoute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceDisableRoute_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceDisableRouteParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceDisableRouteOK, error)) *MockClientService_headscale_service_HeadscaleServiceDisableRoute_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceEnableRoute provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceEnableRoute(params *headscale_service.HeadscaleServiceEnableRouteParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceEnableRouteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceEnableRoute")
	}

	var r0 *headscale_service.HeadscaleServiceEnableRouteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceEnableRouteParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceEnableRouteOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceEnableRouteParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceEnableRouteOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceEnableRouteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceEnableRouteParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceEnableRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceEnableRoute'
type MockClientService_headscale_service_HeadscaleServiceEnableRoute_Call struct {
	*mock.Call
}

// HeadscaleServiceEnableRoute is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceEnableRouteParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceEnableRoute(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceEnableRoute_Call {
	return &MockClientService_headscale_service_HeadscaleServiceEnableRoute_Call{Call: _e.mock.On("HeadscaleServiceEnableRoute",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceEnableRoute_Call) Run(run func(params *headscale_service.HeadscaleServiceEnableRouteParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceEnableRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceEnableRouteParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceEnableRoute_Call) Return(_a0 *headscale_service.HeadscaleServiceEnableRouteOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceEnableRoute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceEnableRoute_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceEnableRouteParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceEnableRouteOK, error)) *MockClientService_headscale_service_HeadscaleServiceEnableRoute_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceExpireAPIKey provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceExpireAPIKey(params *headscale_service.HeadscaleServiceExpireAPIKeyParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceExpireAPIKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceExpireAPIKey")
	}

	var r0 *headscale_service.HeadscaleServiceExpireAPIKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceExpireAPIKeyParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceExpireAPIKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceExpireAPIKeyParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceExpireAPIKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceExpireAPIKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceExpireAPIKeyParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceExpireAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceExpireAPIKey'
type MockClientService_headscale_service_HeadscaleServiceExpireAPIKey_Call struct {
	*mock.Call
}

// HeadscaleServiceExpireAPIKey is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceExpireAPIKeyParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceExpireAPIKey(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceExpireAPIKey_Call {
	return &MockClientService_headscale_service_HeadscaleServiceExpireAPIKey_Call{Call: _e.mock.On("HeadscaleServiceExpireAPIKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceExpireAPIKey_Call) Run(run func(params *headscale_service.HeadscaleServiceExpireAPIKeyParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceExpireAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceExpireAPIKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceExpireAPIKey_Call) Return(_a0 *headscale_service.HeadscaleServiceExpireAPIKeyOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceExpireAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceExpireAPIKey_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceExpireAPIKeyParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceExpireAPIKeyOK, error)) *MockClientService_headscale_service_HeadscaleServiceExpireAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceExpireMachine provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceExpireMachine(params *headscale_service.HeadscaleServiceExpireMachineParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceExpireMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceExpireMachine")
	}

	var r0 *headscale_service.HeadscaleServiceExpireMachineOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceExpireMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceExpireMachineOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceExpireMachineParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceExpireMachineOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceExpireMachineOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceExpireMachineParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceExpireMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceExpireMachine'
type MockClientService_headscale_service_HeadscaleServiceExpireMachine_Call struct {
	*mock.Call
}

// HeadscaleServiceExpireMachine is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceExpireMachineParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceExpireMachine(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceExpireMachine_Call {
	return &MockClientService_headscale_service_HeadscaleServiceExpireMachine_Call{Call: _e.mock.On("HeadscaleServiceExpireMachine",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceExpireMachine_Call) Run(run func(params *headscale_service.HeadscaleServiceExpireMachineParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceExpireMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceExpireMachineParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceExpireMachine_Call) Return(_a0 *headscale_service.HeadscaleServiceExpireMachineOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceExpireMachine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceExpireMachine_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceExpireMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceExpireMachineOK, error)) *MockClientService_headscale_service_HeadscaleServiceExpireMachine_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceExpirePreAuthKey provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceExpirePreAuthKey(params *headscale_service.HeadscaleServiceExpirePreAuthKeyParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceExpirePreAuthKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceExpirePreAuthKey")
	}

	var r0 *headscale_service.HeadscaleServiceExpirePreAuthKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceExpirePreAuthKeyParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceExpirePreAuthKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceExpirePreAuthKeyParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceExpirePreAuthKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceExpirePreAuthKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceExpirePreAuthKeyParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceExpirePreAuthKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceExpirePreAuthKey'
type MockClientService_headscale_service_HeadscaleServiceExpirePreAuthKey_Call struct {
	*mock.Call
}

// HeadscaleServiceExpirePreAuthKey is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceExpirePreAuthKeyParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceExpirePreAuthKey(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceExpirePreAuthKey_Call {
	return &MockClientService_headscale_service_HeadscaleServiceExpirePreAuthKey_Call{Call: _e.mock.On("HeadscaleServiceExpirePreAuthKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceExpirePreAuthKey_Call) Run(run func(params *headscale_service.HeadscaleServiceExpirePreAuthKeyParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceExpirePreAuthKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceExpirePreAuthKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceExpirePreAuthKey_Call) Return(_a0 *headscale_service.HeadscaleServiceExpirePreAuthKeyOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceExpirePreAuthKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceExpirePreAuthKey_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceExpirePreAuthKeyParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceExpirePreAuthKeyOK, error)) *MockClientService_headscale_service_HeadscaleServiceExpirePreAuthKey_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceGetMachine provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceGetMachine(params *headscale_service.HeadscaleServiceGetMachineParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceGetMachine")
	}

	var r0 *headscale_service.HeadscaleServiceGetMachineOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceGetMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetMachineOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceGetMachineParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceGetMachineOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceGetMachineOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceGetMachineParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceGetMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceGetMachine'
type MockClientService_headscale_service_HeadscaleServiceGetMachine_Call struct {
	*mock.Call
}

// HeadscaleServiceGetMachine is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceGetMachineParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceGetMachine(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceGetMachine_Call {
	return &MockClientService_headscale_service_HeadscaleServiceGetMachine_Call{Call: _e.mock.On("HeadscaleServiceGetMachine",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetMachine_Call) Run(run func(params *headscale_service.HeadscaleServiceGetMachineParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceGetMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceGetMachineParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetMachine_Call) Return(_a0 *headscale_service.HeadscaleServiceGetMachineOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceGetMachine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetMachine_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceGetMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetMachineOK, error)) *MockClientService_headscale_service_HeadscaleServiceGetMachine_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceGetMachineRoutes provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceGetMachineRoutes(params *headscale_service.HeadscaleServiceGetMachineRoutesParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetMachineRoutesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceGetMachineRoutes")
	}

	var r0 *headscale_service.HeadscaleServiceGetMachineRoutesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceGetMachineRoutesParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetMachineRoutesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceGetMachineRoutesParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceGetMachineRoutesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceGetMachineRoutesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceGetMachineRoutesParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceGetMachineRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceGetMachineRoutes'
type MockClientService_headscale_service_HeadscaleServiceGetMachineRoutes_Call struct {
	*mock.Call
}

// HeadscaleServiceGetMachineRoutes is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceGetMachineRoutesParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceGetMachineRoutes(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceGetMachineRoutes_Call {
	return &MockClientService_headscale_service_HeadscaleServiceGetMachineRoutes_Call{Call: _e.mock.On("HeadscaleServiceGetMachineRoutes",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetMachineRoutes_Call) Run(run func(params *headscale_service.HeadscaleServiceGetMachineRoutesParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceGetMachineRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceGetMachineRoutesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetMachineRoutes_Call) Return(_a0 *headscale_service.HeadscaleServiceGetMachineRoutesOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceGetMachineRoutes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetMachineRoutes_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceGetMachineRoutesParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetMachineRoutesOK, error)) *MockClientService_headscale_service_HeadscaleServiceGetMachineRoutes_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceGetRoutes provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceGetRoutes(params *headscale_service.HeadscaleServiceGetRoutesParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetRoutesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceGetRoutes")
	}

	var r0 *headscale_service.HeadscaleServiceGetRoutesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceGetRoutesParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetRoutesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceGetRoutesParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceGetRoutesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceGetRoutesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceGetRoutesParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceGetRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceGetRoutes'
type MockClientService_headscale_service_HeadscaleServiceGetRoutes_Call struct {
	*mock.Call
}

// HeadscaleServiceGetRoutes is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceGetRoutesParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceGetRoutes(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceGetRoutes_Call {
	return &MockClientService_headscale_service_HeadscaleServiceGetRoutes_Call{Call: _e.mock.On("HeadscaleServiceGetRoutes",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetRoutes_Call) Run(run func(params *headscale_service.HeadscaleServiceGetRoutesParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceGetRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceGetRoutesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetRoutes_Call) Return(_a0 *headscale_service.HeadscaleServiceGetRoutesOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceGetRoutes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetRoutes_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceGetRoutesParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetRoutesOK, error)) *MockClientService_headscale_service_HeadscaleServiceGetRoutes_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceGetUser provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceGetUser(params *headscale_service.HeadscaleServiceGetUserParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceGetUser")
	}

	var r0 *headscale_service.HeadscaleServiceGetUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceGetUserParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceGetUserParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceGetUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceGetUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceGetUserParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceGetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceGetUser'
type MockClientService_headscale_service_HeadscaleServiceGetUser_Call struct {
	*mock.Call
}

// HeadscaleServiceGetUser is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceGetUserParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceGetUser(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceGetUser_Call {
	return &MockClientService_headscale_service_HeadscaleServiceGetUser_Call{Call: _e.mock.On("HeadscaleServiceGetUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetUser_Call) Run(run func(params *headscale_service.HeadscaleServiceGetUserParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceGetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceGetUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetUser_Call) Return(_a0 *headscale_service.HeadscaleServiceGetUserOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceGetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceGetUser_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceGetUserParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceGetUserOK, error)) *MockClientService_headscale_service_HeadscaleServiceGetUser_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceListAPIKeys provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceListAPIKeys(params *headscale_service.HeadscaleServiceListAPIKeysParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListAPIKeysOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceListAPIKeys")
	}

	var r0 *headscale_service.HeadscaleServiceListAPIKeysOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceListAPIKeysParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListAPIKeysOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceListAPIKeysParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceListAPIKeysOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceListAPIKeysOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceListAPIKeysParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceListAPIKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceListAPIKeys'
type MockClientService_headscale_service_HeadscaleServiceListAPIKeys_Call struct {
	*mock.Call
}

// HeadscaleServiceListAPIKeys is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceListAPIKeysParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceListAPIKeys(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceListAPIKeys_Call {
	return &MockClientService_headscale_service_HeadscaleServiceListAPIKeys_Call{Call: _e.mock.On("HeadscaleServiceListAPIKeys",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListAPIKeys_Call) Run(run func(params *headscale_service.HeadscaleServiceListAPIKeysParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceListAPIKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceListAPIKeysParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListAPIKeys_Call) Return(_a0 *headscale_service.HeadscaleServiceListAPIKeysOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceListAPIKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListAPIKeys_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceListAPIKeysParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListAPIKeysOK, error)) *MockClientService_headscale_service_HeadscaleServiceListAPIKeys_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceListMachines provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceListMachines(params *headscale_service.HeadscaleServiceListMachinesParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListMachinesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceListMachines")
	}

	var r0 *headscale_service.HeadscaleServiceListMachinesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceListMachinesParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListMachinesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceListMachinesParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceListMachinesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceListMachinesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceListMachinesParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceListMachines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceListMachines'
type MockClientService_headscale_service_HeadscaleServiceListMachines_Call struct {
	*mock.Call
}

// HeadscaleServiceListMachines is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceListMachinesParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceListMachines(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceListMachines_Call {
	return &MockClientService_headscale_service_HeadscaleServiceListMachines_Call{Call: _e.mock.On("HeadscaleServiceListMachines",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListMachines_Call) Run(run func(params *headscale_service.HeadscaleServiceListMachinesParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceListMachines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceListMachinesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListMachines_Call) Return(_a0 *headscale_service.HeadscaleServiceListMachinesOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceListMachines_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListMachines_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceListMachinesParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListMachinesOK, error)) *MockClientService_headscale_service_HeadscaleServiceListMachines_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceListPreAuthKeys provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceListPreAuthKeys(params *headscale_service.HeadscaleServiceListPreAuthKeysParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListPreAuthKeysOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceListPreAuthKeys")
	}

	var r0 *headscale_service.HeadscaleServiceListPreAuthKeysOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceListPreAuthKeysParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListPreAuthKeysOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceListPreAuthKeysParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceListPreAuthKeysOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceListPreAuthKeysOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceListPreAuthKeysParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceListPreAuthKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceListPreAuthKeys'
type MockClientService_headscale_service_HeadscaleServiceListPreAuthKeys_Call struct {
	*mock.Call
}

// HeadscaleServiceListPreAuthKeys is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceListPreAuthKeysParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceListPreAuthKeys(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceListPreAuthKeys_Call {
	return &MockClientService_headscale_service_HeadscaleServiceListPreAuthKeys_Call{Call: _e.mock.On("HeadscaleServiceListPreAuthKeys",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListPreAuthKeys_Call) Run(run func(params *headscale_service.HeadscaleServiceListPreAuthKeysParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceListPreAuthKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceListPreAuthKeysParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListPreAuthKeys_Call) Return(_a0 *headscale_service.HeadscaleServiceListPreAuthKeysOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceListPreAuthKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListPreAuthKeys_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceListPreAuthKeysParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListPreAuthKeysOK, error)) *MockClientService_headscale_service_HeadscaleServiceListPreAuthKeys_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceListUsers provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceListUsers(params *headscale_service.HeadscaleServiceListUsersParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListUsersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceListUsers")
	}

	var r0 *headscale_service.HeadscaleServiceListUsersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceListUsersParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListUsersOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceListUsersParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceListUsersOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceListUsersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceListUsersParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceListUsers'
type MockClientService_headscale_service_HeadscaleServiceListUsers_Call struct {
	*mock.Call
}

// HeadscaleServiceListUsers is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceListUsersParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceListUsers(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceListUsers_Call {
	return &MockClientService_headscale_service_HeadscaleServiceListUsers_Call{Call: _e.mock.On("HeadscaleServiceListUsers",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListUsers_Call) Run(run func(params *headscale_service.HeadscaleServiceListUsersParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceListUsersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListUsers_Call) Return(_a0 *headscale_service.HeadscaleServiceListUsersOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceListUsers_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceListUsersParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceListUsersOK, error)) *MockClientService_headscale_service_HeadscaleServiceListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceMoveMachine provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceMoveMachine(params *headscale_service.HeadscaleServiceMoveMachineParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceMoveMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceMoveMachine")
	}

	var r0 *headscale_service.HeadscaleServiceMoveMachineOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceMoveMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceMoveMachineOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceMoveMachineParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceMoveMachineOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceMoveMachineOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceMoveMachineParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceMoveMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceMoveMachine'
type MockClientService_headscale_service_HeadscaleServiceMoveMachine_Call struct {
	*mock.Call
}

// HeadscaleServiceMoveMachine is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceMoveMachineParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceMoveMachine(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceMoveMachine_Call {
	return &MockClientService_headscale_service_HeadscaleServiceMoveMachine_Call{Call: _e.mock.On("HeadscaleServiceMoveMachine",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceMoveMachine_Call) Run(run func(params *headscale_service.HeadscaleServiceMoveMachineParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceMoveMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceMoveMachineParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceMoveMachine_Call) Return(_a0 *headscale_service.HeadscaleServiceMoveMachineOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceMoveMachine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceMoveMachine_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceMoveMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceMoveMachineOK, error)) *MockClientService_headscale_service_HeadscaleServiceMoveMachine_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceRegisterMachine provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceRegisterMachine(params *headscale_service.HeadscaleServiceRegisterMachineParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceRegisterMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceRegisterMachine")
	}

	var r0 *headscale_service.HeadscaleServiceRegisterMachineOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceRegisterMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceRegisterMachineOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceRegisterMachineParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceRegisterMachineOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceRegisterMachineOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceRegisterMachineParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceRegisterMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceRegisterMachine'
type MockClientService_headscale_service_HeadscaleServiceRegisterMachine_Call struct {
	*mock.Call
}

// HeadscaleServiceRegisterMachine is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceRegisterMachineParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceRegisterMachine(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceRegisterMachine_Call {
	return &MockClientService_headscale_service_HeadscaleServiceRegisterMachine_Call{Call: _e.mock.On("HeadscaleServiceRegisterMachine",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceRegisterMachine_Call) Run(run func(params *headscale_service.HeadscaleServiceRegisterMachineParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceRegisterMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceRegisterMachineParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceRegisterMachine_Call) Return(_a0 *headscale_service.HeadscaleServiceRegisterMachineOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceRegisterMachine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceRegisterMachine_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceRegisterMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceRegisterMachineOK, error)) *MockClientService_headscale_service_HeadscaleServiceRegisterMachine_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceRenameMachine provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceRenameMachine(params *headscale_service.HeadscaleServiceRenameMachineParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceRenameMachineOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceRenameMachine")
	}

	var r0 *headscale_service.HeadscaleServiceRenameMachineOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceRenameMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceRenameMachineOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceRenameMachineParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceRenameMachineOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceRenameMachineOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceRenameMachineParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceRenameMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceRenameMachine'
type MockClientService_headscale_service_HeadscaleServiceRenameMachine_Call struct {
	*mock.Call
}

// HeadscaleServiceRenameMachine is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceRenameMachineParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceRenameMachine(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceRenameMachine_Call {
	return &MockClientService_headscale_service_HeadscaleServiceRenameMachine_Call{Call: _e.mock.On("HeadscaleServiceRenameMachine",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceRenameMachine_Call) Run(run func(params *headscale_service.HeadscaleServiceRenameMachineParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceRenameMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceRenameMachineParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceRenameMachine_Call) Return(_a0 *headscale_service.HeadscaleServiceRenameMachineOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceRenameMachine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceRenameMachine_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceRenameMachineParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceRenameMachineOK, error)) *MockClientService_headscale_service_HeadscaleServiceRenameMachine_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceRenameUser provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceRenameUser(params *headscale_service.HeadscaleServiceRenameUserParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceRenameUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceRenameUser")
	}

	var r0 *headscale_service.HeadscaleServiceRenameUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceRenameUserParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceRenameUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceRenameUserParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceRenameUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceRenameUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceRenameUserParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceRenameUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceRenameUser'
type MockClientService_headscale_service_HeadscaleServiceRenameUser_Call struct {
	*mock.Call
}

// HeadscaleServiceRenameUser is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceRenameUserParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceRenameUser(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceRenameUser_Call {
	return &MockClientService_headscale_service_HeadscaleServiceRenameUser_Call{Call: _e.mock.On("HeadscaleServiceRenameUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceRenameUser_Call) Run(run func(params *headscale_service.HeadscaleServiceRenameUserParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceRenameUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceRenameUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceRenameUser_Call) Return(_a0 *headscale_service.HeadscaleServiceRenameUserOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceRenameUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceRenameUser_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceRenameUserParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceRenameUserOK, error)) *MockClientService_headscale_service_HeadscaleServiceRenameUser_Call {
	_c.Call.Return(run)
	return _c
}

// HeadscaleServiceSetTags provides a mock function with given fields: params, opts
func (_m *MockClientService_headscale_service) HeadscaleServiceSetTags(params *headscale_service.HeadscaleServiceSetTagsParams, opts ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceSetTagsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HeadscaleServiceSetTags")
	}

	var r0 *headscale_service.HeadscaleServiceSetTagsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceSetTagsParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceSetTagsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*headscale_service.HeadscaleServiceSetTagsParams, ...headscale_service.ClientOption) *headscale_service.HeadscaleServiceSetTagsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*headscale_service.HeadscaleServiceSetTagsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*headscale_service.HeadscaleServiceSetTagsParams, ...headscale_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_headscale_service_HeadscaleServiceSetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadscaleServiceSetTags'
type MockClientService_headscale_service_HeadscaleServiceSetTags_Call struct {
	*mock.Call
}

// HeadscaleServiceSetTags is a helper method to define mock.On call
//   - params *headscale_service.HeadscaleServiceSetTagsParams
//   - opts ...headscale_service.ClientOption
func (_e *MockClientService_headscale_service_Expecter) HeadscaleServiceSetTags(params interface{}, opts ...interface{}) *MockClientService_headscale_service_HeadscaleServiceSetTags_Call {
	return &MockClientService_headscale_service_HeadscaleServiceSetTags_Call{Call: _e.mock.On("HeadscaleServiceSetTags",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_headscale_service_HeadscaleServiceSetTags_Call) Run(run func(params *headscale_service.HeadscaleServiceSetTagsParams, opts ...headscale_service.ClientOption)) *MockClientService_headscale_service_HeadscaleServiceSetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]headscale_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(headscale_service.ClientOption)
			}
		}
		run(args[0].(*headscale_service.HeadscaleServiceSetTagsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceSetTags_Call) Return(_a0 *headscale_service.HeadscaleServiceSetTagsOK, _a1 error) *MockClientService_headscale_service_HeadscaleServiceSetTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_headscale_service_HeadscaleServiceSetTags_Call) RunAndReturn(run func(*headscale_service.HeadscaleServiceSetTagsParams, ...headscale_service.ClientOption) (*headscale_service.HeadscaleServiceSetTagsOK, error)) *MockClientService_headscale_service_HeadscaleServiceSetTags_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService_headscale_service) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_headscale_service_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_headscale_service_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_headscale_service_Expecter) SetTransport(transport interface{}) *MockClientService_headscale_service_SetTransport_Call {
	return &MockClientService_headscale_service_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_headscale_service_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_headscale_service_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_headscale_service_SetTransport_Call) Return() *MockClientService_headscale_service_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_headscale_service_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_headscale_service_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService_headscale_service creates a new instance of MockClientService_headscale_service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService_headscale_service(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService_headscale_service {
	mock := &MockClientService_headscale_service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
