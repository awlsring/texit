// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockNotification_gateway is an autogenerated mock type for the Notification type
type MockNotification_gateway struct {
	mock.Mock
}

type MockNotification_gateway_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotification_gateway) EXPECT() *MockNotification_gateway_Expecter {
	return &MockNotification_gateway_Expecter{mock: &_m.Mock}
}

// Endpoint provides a mock function with given fields:
func (_m *MockNotification_gateway) Endpoint() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Endpoint")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNotification_gateway_Endpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Endpoint'
type MockNotification_gateway_Endpoint_Call struct {
	*mock.Call
}

// Endpoint is a helper method to define mock.On call
func (_e *MockNotification_gateway_Expecter) Endpoint() *MockNotification_gateway_Endpoint_Call {
	return &MockNotification_gateway_Endpoint_Call{Call: _e.mock.On("Endpoint")}
}

func (_c *MockNotification_gateway_Endpoint_Call) Run(run func()) *MockNotification_gateway_Endpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNotification_gateway_Endpoint_Call) Return(_a0 string) *MockNotification_gateway_Endpoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotification_gateway_Endpoint_Call) RunAndReturn(run func() string) *MockNotification_gateway_Endpoint_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, msg
func (_m *MockNotification_gateway) SendMessage(ctx context.Context, msg string) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotification_gateway_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockNotification_gateway_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
func (_e *MockNotification_gateway_Expecter) SendMessage(ctx interface{}, msg interface{}) *MockNotification_gateway_SendMessage_Call {
	return &MockNotification_gateway_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, msg)}
}

func (_c *MockNotification_gateway_SendMessage_Call) Run(run func(ctx context.Context, msg string)) *MockNotification_gateway_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNotification_gateway_SendMessage_Call) Return(_a0 error) *MockNotification_gateway_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotification_gateway_SendMessage_Call) RunAndReturn(run func(context.Context, string) error) *MockNotification_gateway_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotification_gateway creates a new instance of MockNotification_gateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotification_gateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotification_gateway {
	mock := &MockNotification_gateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
