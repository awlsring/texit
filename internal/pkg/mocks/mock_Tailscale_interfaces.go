// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tailscale "github.com/tailscale/tailscale-client-go/tailscale"
)

// MockTailscale_interfaces is an autogenerated mock type for the Tailscale type
type MockTailscale_interfaces struct {
	mock.Mock
}

type MockTailscale_interfaces_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTailscale_interfaces) EXPECT() *MockTailscale_interfaces_Expecter {
	return &MockTailscale_interfaces_Expecter{mock: &_m.Mock}
}

// ACL provides a mock function with given fields: ctx
func (_m *MockTailscale_interfaces) ACL(ctx context.Context) (*tailscale.ACL, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ACL")
	}

	var r0 *tailscale.ACL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*tailscale.ACL, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *tailscale.ACL); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tailscale.ACL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTailscale_interfaces_ACL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACL'
type MockTailscale_interfaces_ACL_Call struct {
	*mock.Call
}

// ACL is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTailscale_interfaces_Expecter) ACL(ctx interface{}) *MockTailscale_interfaces_ACL_Call {
	return &MockTailscale_interfaces_ACL_Call{Call: _e.mock.On("ACL", ctx)}
}

func (_c *MockTailscale_interfaces_ACL_Call) Run(run func(ctx context.Context)) *MockTailscale_interfaces_ACL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTailscale_interfaces_ACL_Call) Return(_a0 *tailscale.ACL, _a1 error) *MockTailscale_interfaces_ACL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTailscale_interfaces_ACL_Call) RunAndReturn(run func(context.Context) (*tailscale.ACL, error)) *MockTailscale_interfaces_ACL_Call {
	_c.Call.Return(run)
	return _c
}

// CreateKey provides a mock function with given fields: ctx, caps, opts
func (_m *MockTailscale_interfaces) CreateKey(ctx context.Context, caps tailscale.KeyCapabilities, opts ...tailscale.CreateKeyOption) (tailscale.Key, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, caps)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateKey")
	}

	var r0 tailscale.Key
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tailscale.KeyCapabilities, ...tailscale.CreateKeyOption) (tailscale.Key, error)); ok {
		return rf(ctx, caps, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tailscale.KeyCapabilities, ...tailscale.CreateKeyOption) tailscale.Key); ok {
		r0 = rf(ctx, caps, opts...)
	} else {
		r0 = ret.Get(0).(tailscale.Key)
	}

	if rf, ok := ret.Get(1).(func(context.Context, tailscale.KeyCapabilities, ...tailscale.CreateKeyOption) error); ok {
		r1 = rf(ctx, caps, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTailscale_interfaces_CreateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKey'
type MockTailscale_interfaces_CreateKey_Call struct {
	*mock.Call
}

// CreateKey is a helper method to define mock.On call
//   - ctx context.Context
//   - caps tailscale.KeyCapabilities
//   - opts ...tailscale.CreateKeyOption
func (_e *MockTailscale_interfaces_Expecter) CreateKey(ctx interface{}, caps interface{}, opts ...interface{}) *MockTailscale_interfaces_CreateKey_Call {
	return &MockTailscale_interfaces_CreateKey_Call{Call: _e.mock.On("CreateKey",
		append([]interface{}{ctx, caps}, opts...)...)}
}

func (_c *MockTailscale_interfaces_CreateKey_Call) Run(run func(ctx context.Context, caps tailscale.KeyCapabilities, opts ...tailscale.CreateKeyOption)) *MockTailscale_interfaces_CreateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]tailscale.CreateKeyOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(tailscale.CreateKeyOption)
			}
		}
		run(args[0].(context.Context), args[1].(tailscale.KeyCapabilities), variadicArgs...)
	})
	return _c
}

func (_c *MockTailscale_interfaces_CreateKey_Call) Return(_a0 tailscale.Key, _a1 error) *MockTailscale_interfaces_CreateKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTailscale_interfaces_CreateKey_Call) RunAndReturn(run func(context.Context, tailscale.KeyCapabilities, ...tailscale.CreateKeyOption) (tailscale.Key, error)) *MockTailscale_interfaces_CreateKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDevice provides a mock function with given fields: _a0, _a1
func (_m *MockTailscale_interfaces) DeleteDevice(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTailscale_interfaces_DeleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDevice'
type MockTailscale_interfaces_DeleteDevice_Call struct {
	*mock.Call
}

// DeleteDevice is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockTailscale_interfaces_Expecter) DeleteDevice(_a0 interface{}, _a1 interface{}) *MockTailscale_interfaces_DeleteDevice_Call {
	return &MockTailscale_interfaces_DeleteDevice_Call{Call: _e.mock.On("DeleteDevice", _a0, _a1)}
}

func (_c *MockTailscale_interfaces_DeleteDevice_Call) Run(run func(_a0 context.Context, _a1 string)) *MockTailscale_interfaces_DeleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTailscale_interfaces_DeleteDevice_Call) Return(_a0 error) *MockTailscale_interfaces_DeleteDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTailscale_interfaces_DeleteDevice_Call) RunAndReturn(run func(context.Context, string) error) *MockTailscale_interfaces_DeleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKey provides a mock function with given fields: _a0, _a1
func (_m *MockTailscale_interfaces) DeleteKey(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTailscale_interfaces_DeleteKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKey'
type MockTailscale_interfaces_DeleteKey_Call struct {
	*mock.Call
}

// DeleteKey is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockTailscale_interfaces_Expecter) DeleteKey(_a0 interface{}, _a1 interface{}) *MockTailscale_interfaces_DeleteKey_Call {
	return &MockTailscale_interfaces_DeleteKey_Call{Call: _e.mock.On("DeleteKey", _a0, _a1)}
}

func (_c *MockTailscale_interfaces_DeleteKey_Call) Run(run func(_a0 context.Context, _a1 string)) *MockTailscale_interfaces_DeleteKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTailscale_interfaces_DeleteKey_Call) Return(_a0 error) *MockTailscale_interfaces_DeleteKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTailscale_interfaces_DeleteKey_Call) RunAndReturn(run func(context.Context, string) error) *MockTailscale_interfaces_DeleteKey_Call {
	_c.Call.Return(run)
	return _c
}

// Devices provides a mock function with given fields: ctx
func (_m *MockTailscale_interfaces) Devices(ctx context.Context) ([]tailscale.Device, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Devices")
	}

	var r0 []tailscale.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]tailscale.Device, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []tailscale.Device); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tailscale.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTailscale_interfaces_Devices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Devices'
type MockTailscale_interfaces_Devices_Call struct {
	*mock.Call
}

// Devices is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTailscale_interfaces_Expecter) Devices(ctx interface{}) *MockTailscale_interfaces_Devices_Call {
	return &MockTailscale_interfaces_Devices_Call{Call: _e.mock.On("Devices", ctx)}
}

func (_c *MockTailscale_interfaces_Devices_Call) Run(run func(ctx context.Context)) *MockTailscale_interfaces_Devices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTailscale_interfaces_Devices_Call) Return(_a0 []tailscale.Device, _a1 error) *MockTailscale_interfaces_Devices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTailscale_interfaces_Devices_Call) RunAndReturn(run func(context.Context) ([]tailscale.Device, error)) *MockTailscale_interfaces_Devices_Call {
	_c.Call.Return(run)
	return _c
}

// SetACL provides a mock function with given fields: ctx, acl, opts
func (_m *MockTailscale_interfaces) SetACL(ctx context.Context, acl tailscale.ACL, opts ...tailscale.SetACLOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, acl)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetACL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tailscale.ACL, ...tailscale.SetACLOption) error); ok {
		r0 = rf(ctx, acl, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTailscale_interfaces_SetACL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetACL'
type MockTailscale_interfaces_SetACL_Call struct {
	*mock.Call
}

// SetACL is a helper method to define mock.On call
//   - ctx context.Context
//   - acl tailscale.ACL
//   - opts ...tailscale.SetACLOption
func (_e *MockTailscale_interfaces_Expecter) SetACL(ctx interface{}, acl interface{}, opts ...interface{}) *MockTailscale_interfaces_SetACL_Call {
	return &MockTailscale_interfaces_SetACL_Call{Call: _e.mock.On("SetACL",
		append([]interface{}{ctx, acl}, opts...)...)}
}

func (_c *MockTailscale_interfaces_SetACL_Call) Run(run func(ctx context.Context, acl tailscale.ACL, opts ...tailscale.SetACLOption)) *MockTailscale_interfaces_SetACL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]tailscale.SetACLOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(tailscale.SetACLOption)
			}
		}
		run(args[0].(context.Context), args[1].(tailscale.ACL), variadicArgs...)
	})
	return _c
}

func (_c *MockTailscale_interfaces_SetACL_Call) Return(_a0 error) *MockTailscale_interfaces_SetACL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTailscale_interfaces_SetACL_Call) RunAndReturn(run func(context.Context, tailscale.ACL, ...tailscale.SetACLOption) error) *MockTailscale_interfaces_SetACL_Call {
	_c.Call.Return(run)
	return _c
}

// SetDeviceKey provides a mock function with given fields: ctx, deviceID, key
func (_m *MockTailscale_interfaces) SetDeviceKey(ctx context.Context, deviceID string, key tailscale.DeviceKey) error {
	ret := _m.Called(ctx, deviceID, key)

	if len(ret) == 0 {
		panic("no return value specified for SetDeviceKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, tailscale.DeviceKey) error); ok {
		r0 = rf(ctx, deviceID, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTailscale_interfaces_SetDeviceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeviceKey'
type MockTailscale_interfaces_SetDeviceKey_Call struct {
	*mock.Call
}

// SetDeviceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceID string
//   - key tailscale.DeviceKey
func (_e *MockTailscale_interfaces_Expecter) SetDeviceKey(ctx interface{}, deviceID interface{}, key interface{}) *MockTailscale_interfaces_SetDeviceKey_Call {
	return &MockTailscale_interfaces_SetDeviceKey_Call{Call: _e.mock.On("SetDeviceKey", ctx, deviceID, key)}
}

func (_c *MockTailscale_interfaces_SetDeviceKey_Call) Run(run func(ctx context.Context, deviceID string, key tailscale.DeviceKey)) *MockTailscale_interfaces_SetDeviceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(tailscale.DeviceKey))
	})
	return _c
}

func (_c *MockTailscale_interfaces_SetDeviceKey_Call) Return(_a0 error) *MockTailscale_interfaces_SetDeviceKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTailscale_interfaces_SetDeviceKey_Call) RunAndReturn(run func(context.Context, string, tailscale.DeviceKey) error) *MockTailscale_interfaces_SetDeviceKey_Call {
	_c.Call.Return(run)
	return _c
}

// SetDeviceTags provides a mock function with given fields: ctx, deviceID, tags
func (_m *MockTailscale_interfaces) SetDeviceTags(ctx context.Context, deviceID string, tags []string) error {
	ret := _m.Called(ctx, deviceID, tags)

	if len(ret) == 0 {
		panic("no return value specified for SetDeviceTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, deviceID, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTailscale_interfaces_SetDeviceTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeviceTags'
type MockTailscale_interfaces_SetDeviceTags_Call struct {
	*mock.Call
}

// SetDeviceTags is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceID string
//   - tags []string
func (_e *MockTailscale_interfaces_Expecter) SetDeviceTags(ctx interface{}, deviceID interface{}, tags interface{}) *MockTailscale_interfaces_SetDeviceTags_Call {
	return &MockTailscale_interfaces_SetDeviceTags_Call{Call: _e.mock.On("SetDeviceTags", ctx, deviceID, tags)}
}

func (_c *MockTailscale_interfaces_SetDeviceTags_Call) Run(run func(ctx context.Context, deviceID string, tags []string)) *MockTailscale_interfaces_SetDeviceTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockTailscale_interfaces_SetDeviceTags_Call) Return(_a0 error) *MockTailscale_interfaces_SetDeviceTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTailscale_interfaces_SetDeviceTags_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockTailscale_interfaces_SetDeviceTags_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateACL provides a mock function with given fields: ctx, acl
func (_m *MockTailscale_interfaces) ValidateACL(ctx context.Context, acl tailscale.ACL) error {
	ret := _m.Called(ctx, acl)

	if len(ret) == 0 {
		panic("no return value specified for ValidateACL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tailscale.ACL) error); ok {
		r0 = rf(ctx, acl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTailscale_interfaces_ValidateACL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateACL'
type MockTailscale_interfaces_ValidateACL_Call struct {
	*mock.Call
}

// ValidateACL is a helper method to define mock.On call
//   - ctx context.Context
//   - acl tailscale.ACL
func (_e *MockTailscale_interfaces_Expecter) ValidateACL(ctx interface{}, acl interface{}) *MockTailscale_interfaces_ValidateACL_Call {
	return &MockTailscale_interfaces_ValidateACL_Call{Call: _e.mock.On("ValidateACL", ctx, acl)}
}

func (_c *MockTailscale_interfaces_ValidateACL_Call) Run(run func(ctx context.Context, acl tailscale.ACL)) *MockTailscale_interfaces_ValidateACL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tailscale.ACL))
	})
	return _c
}

func (_c *MockTailscale_interfaces_ValidateACL_Call) Return(_a0 error) *MockTailscale_interfaces_ValidateACL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTailscale_interfaces_ValidateACL_Call) RunAndReturn(run func(context.Context, tailscale.ACL) error) *MockTailscale_interfaces_ValidateACL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTailscale_interfaces creates a new instance of MockTailscale_interfaces. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTailscale_interfaces(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTailscale_interfaces {
	mock := &MockTailscale_interfaces{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
