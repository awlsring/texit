// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	ssm "github.com/aws/aws-sdk-go-v2/service/ssm"
)

// MockSsmClient_interfaces is an autogenerated mock type for the SsmClient type
type MockSsmClient_interfaces struct {
	mock.Mock
}

type MockSsmClient_interfaces_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSsmClient_interfaces) EXPECT() *MockSsmClient_interfaces_Expecter {
	return &MockSsmClient_interfaces_Expecter{mock: &_m.Mock}
}

// DeleteParameter provides a mock function with given fields: ctx, params, optFns
func (_m *MockSsmClient_interfaces) DeleteParameter(ctx context.Context, params *ssm.DeleteParameterInput, optFns ...func(*ssm.Options)) (*ssm.DeleteParameterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteParameter")
	}

	var r0 *ssm.DeleteParameterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssm.DeleteParameterInput, ...func(*ssm.Options)) (*ssm.DeleteParameterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssm.DeleteParameterInput, ...func(*ssm.Options)) *ssm.DeleteParameterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssm.DeleteParameterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssm.DeleteParameterInput, ...func(*ssm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSsmClient_interfaces_DeleteParameter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteParameter'
type MockSsmClient_interfaces_DeleteParameter_Call struct {
	*mock.Call
}

// DeleteParameter is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ssm.DeleteParameterInput
//   - optFns ...func(*ssm.Options)
func (_e *MockSsmClient_interfaces_Expecter) DeleteParameter(ctx interface{}, params interface{}, optFns ...interface{}) *MockSsmClient_interfaces_DeleteParameter_Call {
	return &MockSsmClient_interfaces_DeleteParameter_Call{Call: _e.mock.On("DeleteParameter",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockSsmClient_interfaces_DeleteParameter_Call) Run(run func(ctx context.Context, params *ssm.DeleteParameterInput, optFns ...func(*ssm.Options))) *MockSsmClient_interfaces_DeleteParameter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ssm.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ssm.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ssm.DeleteParameterInput), variadicArgs...)
	})
	return _c
}

func (_c *MockSsmClient_interfaces_DeleteParameter_Call) Return(_a0 *ssm.DeleteParameterOutput, _a1 error) *MockSsmClient_interfaces_DeleteParameter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSsmClient_interfaces_DeleteParameter_Call) RunAndReturn(run func(context.Context, *ssm.DeleteParameterInput, ...func(*ssm.Options)) (*ssm.DeleteParameterOutput, error)) *MockSsmClient_interfaces_DeleteParameter_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeParameters provides a mock function with given fields: ctx, params, optFns
func (_m *MockSsmClient_interfaces) DescribeParameters(ctx context.Context, params *ssm.DescribeParametersInput, optFns ...func(*ssm.Options)) (*ssm.DescribeParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeParameters")
	}

	var r0 *ssm.DescribeParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssm.DescribeParametersInput, ...func(*ssm.Options)) (*ssm.DescribeParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssm.DescribeParametersInput, ...func(*ssm.Options)) *ssm.DescribeParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssm.DescribeParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssm.DescribeParametersInput, ...func(*ssm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSsmClient_interfaces_DescribeParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeParameters'
type MockSsmClient_interfaces_DescribeParameters_Call struct {
	*mock.Call
}

// DescribeParameters is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ssm.DescribeParametersInput
//   - optFns ...func(*ssm.Options)
func (_e *MockSsmClient_interfaces_Expecter) DescribeParameters(ctx interface{}, params interface{}, optFns ...interface{}) *MockSsmClient_interfaces_DescribeParameters_Call {
	return &MockSsmClient_interfaces_DescribeParameters_Call{Call: _e.mock.On("DescribeParameters",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockSsmClient_interfaces_DescribeParameters_Call) Run(run func(ctx context.Context, params *ssm.DescribeParametersInput, optFns ...func(*ssm.Options))) *MockSsmClient_interfaces_DescribeParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ssm.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ssm.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ssm.DescribeParametersInput), variadicArgs...)
	})
	return _c
}

func (_c *MockSsmClient_interfaces_DescribeParameters_Call) Return(_a0 *ssm.DescribeParametersOutput, _a1 error) *MockSsmClient_interfaces_DescribeParameters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSsmClient_interfaces_DescribeParameters_Call) RunAndReturn(run func(context.Context, *ssm.DescribeParametersInput, ...func(*ssm.Options)) (*ssm.DescribeParametersOutput, error)) *MockSsmClient_interfaces_DescribeParameters_Call {
	_c.Call.Return(run)
	return _c
}

// GetParameter provides a mock function with given fields: ctx, params, optFns
func (_m *MockSsmClient_interfaces) GetParameter(ctx context.Context, params *ssm.GetParameterInput, optFns ...func(*ssm.Options)) (*ssm.GetParameterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetParameter")
	}

	var r0 *ssm.GetParameterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssm.GetParameterInput, ...func(*ssm.Options)) (*ssm.GetParameterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssm.GetParameterInput, ...func(*ssm.Options)) *ssm.GetParameterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssm.GetParameterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssm.GetParameterInput, ...func(*ssm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSsmClient_interfaces_GetParameter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParameter'
type MockSsmClient_interfaces_GetParameter_Call struct {
	*mock.Call
}

// GetParameter is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ssm.GetParameterInput
//   - optFns ...func(*ssm.Options)
func (_e *MockSsmClient_interfaces_Expecter) GetParameter(ctx interface{}, params interface{}, optFns ...interface{}) *MockSsmClient_interfaces_GetParameter_Call {
	return &MockSsmClient_interfaces_GetParameter_Call{Call: _e.mock.On("GetParameter",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockSsmClient_interfaces_GetParameter_Call) Run(run func(ctx context.Context, params *ssm.GetParameterInput, optFns ...func(*ssm.Options))) *MockSsmClient_interfaces_GetParameter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ssm.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ssm.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ssm.GetParameterInput), variadicArgs...)
	})
	return _c
}

func (_c *MockSsmClient_interfaces_GetParameter_Call) Return(_a0 *ssm.GetParameterOutput, _a1 error) *MockSsmClient_interfaces_GetParameter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSsmClient_interfaces_GetParameter_Call) RunAndReturn(run func(context.Context, *ssm.GetParameterInput, ...func(*ssm.Options)) (*ssm.GetParameterOutput, error)) *MockSsmClient_interfaces_GetParameter_Call {
	_c.Call.Return(run)
	return _c
}

// PutParameter provides a mock function with given fields: ctx, params, optFns
func (_m *MockSsmClient_interfaces) PutParameter(ctx context.Context, params *ssm.PutParameterInput, optFns ...func(*ssm.Options)) (*ssm.PutParameterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutParameter")
	}

	var r0 *ssm.PutParameterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssm.PutParameterInput, ...func(*ssm.Options)) (*ssm.PutParameterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssm.PutParameterInput, ...func(*ssm.Options)) *ssm.PutParameterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssm.PutParameterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssm.PutParameterInput, ...func(*ssm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSsmClient_interfaces_PutParameter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutParameter'
type MockSsmClient_interfaces_PutParameter_Call struct {
	*mock.Call
}

// PutParameter is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ssm.PutParameterInput
//   - optFns ...func(*ssm.Options)
func (_e *MockSsmClient_interfaces_Expecter) PutParameter(ctx interface{}, params interface{}, optFns ...interface{}) *MockSsmClient_interfaces_PutParameter_Call {
	return &MockSsmClient_interfaces_PutParameter_Call{Call: _e.mock.On("PutParameter",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockSsmClient_interfaces_PutParameter_Call) Run(run func(ctx context.Context, params *ssm.PutParameterInput, optFns ...func(*ssm.Options))) *MockSsmClient_interfaces_PutParameter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ssm.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ssm.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ssm.PutParameterInput), variadicArgs...)
	})
	return _c
}

func (_c *MockSsmClient_interfaces_PutParameter_Call) Return(_a0 *ssm.PutParameterOutput, _a1 error) *MockSsmClient_interfaces_PutParameter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSsmClient_interfaces_PutParameter_Call) RunAndReturn(run func(context.Context, *ssm.PutParameterInput, ...func(*ssm.Options)) (*ssm.PutParameterOutput, error)) *MockSsmClient_interfaces_PutParameter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSsmClient_interfaces creates a new instance of MockSsmClient_interfaces. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSsmClient_interfaces(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSsmClient_interfaces {
	mock := &MockSsmClient_interfaces{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
