// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	notification "github.com/awlsring/texit/internal/pkg/domain/notification"
	mock "github.com/stretchr/testify/mock"

	workflow "github.com/awlsring/texit/internal/pkg/domain/workflow"
)

// MockNotification_service is an autogenerated mock type for the Notification type
type MockNotification_service struct {
	mock.Mock
}

type MockNotification_service_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotification_service) EXPECT() *MockNotification_service_Expecter {
	return &MockNotification_service_Expecter{mock: &_m.Mock}
}

// ListNotifiers provides a mock function with given fields: ctx
func (_m *MockNotification_service) ListNotifiers(ctx context.Context) []*notification.Notifier {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListNotifiers")
	}

	var r0 []*notification.Notifier
	if rf, ok := ret.Get(0).(func(context.Context) []*notification.Notifier); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*notification.Notifier)
		}
	}

	return r0
}

// MockNotification_service_ListNotifiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotifiers'
type MockNotification_service_ListNotifiers_Call struct {
	*mock.Call
}

// ListNotifiers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotification_service_Expecter) ListNotifiers(ctx interface{}) *MockNotification_service_ListNotifiers_Call {
	return &MockNotification_service_ListNotifiers_Call{Call: _e.mock.On("ListNotifiers", ctx)}
}

func (_c *MockNotification_service_ListNotifiers_Call) Run(run func(ctx context.Context)) *MockNotification_service_ListNotifiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotification_service_ListNotifiers_Call) Return(_a0 []*notification.Notifier) *MockNotification_service_ListNotifiers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotification_service_ListNotifiers_Call) RunAndReturn(run func(context.Context) []*notification.Notifier) *MockNotification_service_ListNotifiers_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyExecutionCompletion provides a mock function with given fields: ctx, e, w, status, results
func (_m *MockNotification_service) NotifyExecutionCompletion(ctx context.Context, e workflow.ExecutionIdentifier, w workflow.WorkflowName, status workflow.Status, results workflow.ExecutionResult) error {
	ret := _m.Called(ctx, e, w, status, results)

	if len(ret) == 0 {
		panic("no return value specified for NotifyExecutionCompletion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workflow.ExecutionIdentifier, workflow.WorkflowName, workflow.Status, workflow.ExecutionResult) error); ok {
		r0 = rf(ctx, e, w, status, results)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotification_service_NotifyExecutionCompletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyExecutionCompletion'
type MockNotification_service_NotifyExecutionCompletion_Call struct {
	*mock.Call
}

// NotifyExecutionCompletion is a helper method to define mock.On call
//   - ctx context.Context
//   - e workflow.ExecutionIdentifier
//   - w workflow.WorkflowName
//   - status workflow.Status
//   - results workflow.ExecutionResult
func (_e *MockNotification_service_Expecter) NotifyExecutionCompletion(ctx interface{}, e interface{}, w interface{}, status interface{}, results interface{}) *MockNotification_service_NotifyExecutionCompletion_Call {
	return &MockNotification_service_NotifyExecutionCompletion_Call{Call: _e.mock.On("NotifyExecutionCompletion", ctx, e, w, status, results)}
}

func (_c *MockNotification_service_NotifyExecutionCompletion_Call) Run(run func(ctx context.Context, e workflow.ExecutionIdentifier, w workflow.WorkflowName, status workflow.Status, results workflow.ExecutionResult)) *MockNotification_service_NotifyExecutionCompletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workflow.ExecutionIdentifier), args[2].(workflow.WorkflowName), args[3].(workflow.Status), args[4].(workflow.ExecutionResult))
	})
	return _c
}

func (_c *MockNotification_service_NotifyExecutionCompletion_Call) Return(_a0 error) *MockNotification_service_NotifyExecutionCompletion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotification_service_NotifyExecutionCompletion_Call) RunAndReturn(run func(context.Context, workflow.ExecutionIdentifier, workflow.WorkflowName, workflow.Status, workflow.ExecutionResult) error) *MockNotification_service_NotifyExecutionCompletion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotification_service creates a new instance of MockNotification_service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotification_service(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotification_service {
	mock := &MockNotification_service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
