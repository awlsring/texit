// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	node "github.com/awlsring/texit/internal/pkg/domain/node"

	provider "github.com/awlsring/texit/internal/pkg/domain/provider"

	tailnet "github.com/awlsring/texit/internal/pkg/domain/tailnet"
)

// MockPlatform_gateway is an autogenerated mock type for the Platform type
type MockPlatform_gateway struct {
	mock.Mock
}

type MockPlatform_gateway_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlatform_gateway) EXPECT() *MockPlatform_gateway_Expecter {
	return &MockPlatform_gateway_Expecter{mock: &_m.Mock}
}

// CreateNode provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m *MockPlatform_gateway) CreateNode(_a0 context.Context, _a1 node.Identifier, _a2 tailnet.DeviceName, _a3 *provider.Provider, _a4 provider.Location, _a5 *tailnet.Tailnet, _a6 tailnet.PreauthKey) (node.PlatformIdentifier, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	if len(ret) == 0 {
		panic("no return value specified for CreateNode")
	}

	var r0 node.PlatformIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier, tailnet.DeviceName, *provider.Provider, provider.Location, *tailnet.Tailnet, tailnet.PreauthKey) (node.PlatformIdentifier, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	}
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier, tailnet.DeviceName, *provider.Provider, provider.Location, *tailnet.Tailnet, tailnet.PreauthKey) node.PlatformIdentifier); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r0 = ret.Get(0).(node.PlatformIdentifier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, node.Identifier, tailnet.DeviceName, *provider.Provider, provider.Location, *tailnet.Tailnet, tailnet.PreauthKey) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlatform_gateway_CreateNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNode'
type MockPlatform_gateway_CreateNode_Call struct {
	*mock.Call
}

// CreateNode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 node.Identifier
//   - _a2 tailnet.DeviceName
//   - _a3 *provider.Provider
//   - _a4 provider.Location
//   - _a5 *tailnet.Tailnet
//   - _a6 tailnet.PreauthKey
func (_e *MockPlatform_gateway_Expecter) CreateNode(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}) *MockPlatform_gateway_CreateNode_Call {
	return &MockPlatform_gateway_CreateNode_Call{Call: _e.mock.On("CreateNode", _a0, _a1, _a2, _a3, _a4, _a5, _a6)}
}

func (_c *MockPlatform_gateway_CreateNode_Call) Run(run func(_a0 context.Context, _a1 node.Identifier, _a2 tailnet.DeviceName, _a3 *provider.Provider, _a4 provider.Location, _a5 *tailnet.Tailnet, _a6 tailnet.PreauthKey)) *MockPlatform_gateway_CreateNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(node.Identifier), args[2].(tailnet.DeviceName), args[3].(*provider.Provider), args[4].(provider.Location), args[5].(*tailnet.Tailnet), args[6].(tailnet.PreauthKey))
	})
	return _c
}

func (_c *MockPlatform_gateway_CreateNode_Call) Return(_a0 node.PlatformIdentifier, _a1 error) *MockPlatform_gateway_CreateNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlatform_gateway_CreateNode_Call) RunAndReturn(run func(context.Context, node.Identifier, tailnet.DeviceName, *provider.Provider, provider.Location, *tailnet.Tailnet, tailnet.PreauthKey) (node.PlatformIdentifier, error)) *MockPlatform_gateway_CreateNode_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNode provides a mock function with given fields: _a0, _a1
func (_m *MockPlatform_gateway) DeleteNode(_a0 context.Context, _a1 *node.Node) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *node.Node) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlatform_gateway_DeleteNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNode'
type MockPlatform_gateway_DeleteNode_Call struct {
	*mock.Call
}

// DeleteNode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *node.Node
func (_e *MockPlatform_gateway_Expecter) DeleteNode(_a0 interface{}, _a1 interface{}) *MockPlatform_gateway_DeleteNode_Call {
	return &MockPlatform_gateway_DeleteNode_Call{Call: _e.mock.On("DeleteNode", _a0, _a1)}
}

func (_c *MockPlatform_gateway_DeleteNode_Call) Run(run func(_a0 context.Context, _a1 *node.Node)) *MockPlatform_gateway_DeleteNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*node.Node))
	})
	return _c
}

func (_c *MockPlatform_gateway_DeleteNode_Call) Return(_a0 error) *MockPlatform_gateway_DeleteNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlatform_gateway_DeleteNode_Call) RunAndReturn(run func(context.Context, *node.Node) error) *MockPlatform_gateway_DeleteNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields: _a0, _a1
func (_m *MockPlatform_gateway) GetStatus(_a0 context.Context, _a1 *node.Node) (node.Status, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 node.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *node.Node) (node.Status, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *node.Node) node.Status); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(node.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *node.Node) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlatform_gateway_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type MockPlatform_gateway_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *node.Node
func (_e *MockPlatform_gateway_Expecter) GetStatus(_a0 interface{}, _a1 interface{}) *MockPlatform_gateway_GetStatus_Call {
	return &MockPlatform_gateway_GetStatus_Call{Call: _e.mock.On("GetStatus", _a0, _a1)}
}

func (_c *MockPlatform_gateway_GetStatus_Call) Run(run func(_a0 context.Context, _a1 *node.Node)) *MockPlatform_gateway_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*node.Node))
	})
	return _c
}

func (_c *MockPlatform_gateway_GetStatus_Call) Return(_a0 node.Status, _a1 error) *MockPlatform_gateway_GetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlatform_gateway_GetStatus_Call) RunAndReturn(run func(context.Context, *node.Node) (node.Status, error)) *MockPlatform_gateway_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// StartNode provides a mock function with given fields: _a0, _a1
func (_m *MockPlatform_gateway) StartNode(_a0 context.Context, _a1 *node.Node) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StartNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *node.Node) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlatform_gateway_StartNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartNode'
type MockPlatform_gateway_StartNode_Call struct {
	*mock.Call
}

// StartNode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *node.Node
func (_e *MockPlatform_gateway_Expecter) StartNode(_a0 interface{}, _a1 interface{}) *MockPlatform_gateway_StartNode_Call {
	return &MockPlatform_gateway_StartNode_Call{Call: _e.mock.On("StartNode", _a0, _a1)}
}

func (_c *MockPlatform_gateway_StartNode_Call) Run(run func(_a0 context.Context, _a1 *node.Node)) *MockPlatform_gateway_StartNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*node.Node))
	})
	return _c
}

func (_c *MockPlatform_gateway_StartNode_Call) Return(_a0 error) *MockPlatform_gateway_StartNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlatform_gateway_StartNode_Call) RunAndReturn(run func(context.Context, *node.Node) error) *MockPlatform_gateway_StartNode_Call {
	_c.Call.Return(run)
	return _c
}

// StopNode provides a mock function with given fields: _a0, _a1
func (_m *MockPlatform_gateway) StopNode(_a0 context.Context, _a1 *node.Node) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StopNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *node.Node) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlatform_gateway_StopNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopNode'
type MockPlatform_gateway_StopNode_Call struct {
	*mock.Call
}

// StopNode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *node.Node
func (_e *MockPlatform_gateway_Expecter) StopNode(_a0 interface{}, _a1 interface{}) *MockPlatform_gateway_StopNode_Call {
	return &MockPlatform_gateway_StopNode_Call{Call: _e.mock.On("StopNode", _a0, _a1)}
}

func (_c *MockPlatform_gateway_StopNode_Call) Run(run func(_a0 context.Context, _a1 *node.Node)) *MockPlatform_gateway_StopNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*node.Node))
	})
	return _c
}

func (_c *MockPlatform_gateway_StopNode_Call) Return(_a0 error) *MockPlatform_gateway_StopNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlatform_gateway_StopNode_Call) RunAndReturn(run func(context.Context, *node.Node) error) *MockPlatform_gateway_StopNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlatform_gateway creates a new instance of MockPlatform_gateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlatform_gateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlatform_gateway {
	mock := &MockPlatform_gateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
