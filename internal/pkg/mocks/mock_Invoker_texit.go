// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	texit "github.com/awlsring/texit/pkg/gen/texit"
	mock "github.com/stretchr/testify/mock"
)

// MockInvoker_texit is an autogenerated mock type for the Invoker type
type MockInvoker_texit struct {
	mock.Mock
}

type MockInvoker_texit_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInvoker_texit) EXPECT() *MockInvoker_texit_Expecter {
	return &MockInvoker_texit_Expecter{mock: &_m.Mock}
}

// DeprovisionNode provides a mock function with given fields: ctx, params
func (_m *MockInvoker_texit) DeprovisionNode(ctx context.Context, params texit.DeprovisionNodeParams) (texit.DeprovisionNodeRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DeprovisionNode")
	}

	var r0 texit.DeprovisionNodeRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, texit.DeprovisionNodeParams) (texit.DeprovisionNodeRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, texit.DeprovisionNodeParams) texit.DeprovisionNodeRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(texit.DeprovisionNodeRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, texit.DeprovisionNodeParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_DeprovisionNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeprovisionNode'
type MockInvoker_texit_DeprovisionNode_Call struct {
	*mock.Call
}

// DeprovisionNode is a helper method to define mock.On call
//   - ctx context.Context
//   - params texit.DeprovisionNodeParams
func (_e *MockInvoker_texit_Expecter) DeprovisionNode(ctx interface{}, params interface{}) *MockInvoker_texit_DeprovisionNode_Call {
	return &MockInvoker_texit_DeprovisionNode_Call{Call: _e.mock.On("DeprovisionNode", ctx, params)}
}

func (_c *MockInvoker_texit_DeprovisionNode_Call) Run(run func(ctx context.Context, params texit.DeprovisionNodeParams)) *MockInvoker_texit_DeprovisionNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(texit.DeprovisionNodeParams))
	})
	return _c
}

func (_c *MockInvoker_texit_DeprovisionNode_Call) Return(_a0 texit.DeprovisionNodeRes, _a1 error) *MockInvoker_texit_DeprovisionNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_DeprovisionNode_Call) RunAndReturn(run func(context.Context, texit.DeprovisionNodeParams) (texit.DeprovisionNodeRes, error)) *MockInvoker_texit_DeprovisionNode_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeNode provides a mock function with given fields: ctx, params
func (_m *MockInvoker_texit) DescribeNode(ctx context.Context, params texit.DescribeNodeParams) (texit.DescribeNodeRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNode")
	}

	var r0 texit.DescribeNodeRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, texit.DescribeNodeParams) (texit.DescribeNodeRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, texit.DescribeNodeParams) texit.DescribeNodeRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(texit.DescribeNodeRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, texit.DescribeNodeParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_DescribeNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeNode'
type MockInvoker_texit_DescribeNode_Call struct {
	*mock.Call
}

// DescribeNode is a helper method to define mock.On call
//   - ctx context.Context
//   - params texit.DescribeNodeParams
func (_e *MockInvoker_texit_Expecter) DescribeNode(ctx interface{}, params interface{}) *MockInvoker_texit_DescribeNode_Call {
	return &MockInvoker_texit_DescribeNode_Call{Call: _e.mock.On("DescribeNode", ctx, params)}
}

func (_c *MockInvoker_texit_DescribeNode_Call) Run(run func(ctx context.Context, params texit.DescribeNodeParams)) *MockInvoker_texit_DescribeNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(texit.DescribeNodeParams))
	})
	return _c
}

func (_c *MockInvoker_texit_DescribeNode_Call) Return(_a0 texit.DescribeNodeRes, _a1 error) *MockInvoker_texit_DescribeNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_DescribeNode_Call) RunAndReturn(run func(context.Context, texit.DescribeNodeParams) (texit.DescribeNodeRes, error)) *MockInvoker_texit_DescribeNode_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeProvider provides a mock function with given fields: ctx, params
func (_m *MockInvoker_texit) DescribeProvider(ctx context.Context, params texit.DescribeProviderParams) (texit.DescribeProviderRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProvider")
	}

	var r0 texit.DescribeProviderRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, texit.DescribeProviderParams) (texit.DescribeProviderRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, texit.DescribeProviderParams) texit.DescribeProviderRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(texit.DescribeProviderRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, texit.DescribeProviderParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_DescribeProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeProvider'
type MockInvoker_texit_DescribeProvider_Call struct {
	*mock.Call
}

// DescribeProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - params texit.DescribeProviderParams
func (_e *MockInvoker_texit_Expecter) DescribeProvider(ctx interface{}, params interface{}) *MockInvoker_texit_DescribeProvider_Call {
	return &MockInvoker_texit_DescribeProvider_Call{Call: _e.mock.On("DescribeProvider", ctx, params)}
}

func (_c *MockInvoker_texit_DescribeProvider_Call) Run(run func(ctx context.Context, params texit.DescribeProviderParams)) *MockInvoker_texit_DescribeProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(texit.DescribeProviderParams))
	})
	return _c
}

func (_c *MockInvoker_texit_DescribeProvider_Call) Return(_a0 texit.DescribeProviderRes, _a1 error) *MockInvoker_texit_DescribeProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_DescribeProvider_Call) RunAndReturn(run func(context.Context, texit.DescribeProviderParams) (texit.DescribeProviderRes, error)) *MockInvoker_texit_DescribeProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTailnet provides a mock function with given fields: ctx, params
func (_m *MockInvoker_texit) DescribeTailnet(ctx context.Context, params texit.DescribeTailnetParams) (texit.DescribeTailnetRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTailnet")
	}

	var r0 texit.DescribeTailnetRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, texit.DescribeTailnetParams) (texit.DescribeTailnetRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, texit.DescribeTailnetParams) texit.DescribeTailnetRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(texit.DescribeTailnetRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, texit.DescribeTailnetParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_DescribeTailnet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTailnet'
type MockInvoker_texit_DescribeTailnet_Call struct {
	*mock.Call
}

// DescribeTailnet is a helper method to define mock.On call
//   - ctx context.Context
//   - params texit.DescribeTailnetParams
func (_e *MockInvoker_texit_Expecter) DescribeTailnet(ctx interface{}, params interface{}) *MockInvoker_texit_DescribeTailnet_Call {
	return &MockInvoker_texit_DescribeTailnet_Call{Call: _e.mock.On("DescribeTailnet", ctx, params)}
}

func (_c *MockInvoker_texit_DescribeTailnet_Call) Run(run func(ctx context.Context, params texit.DescribeTailnetParams)) *MockInvoker_texit_DescribeTailnet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(texit.DescribeTailnetParams))
	})
	return _c
}

func (_c *MockInvoker_texit_DescribeTailnet_Call) Return(_a0 texit.DescribeTailnetRes, _a1 error) *MockInvoker_texit_DescribeTailnet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_DescribeTailnet_Call) RunAndReturn(run func(context.Context, texit.DescribeTailnetParams) (texit.DescribeTailnetRes, error)) *MockInvoker_texit_DescribeTailnet_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecution provides a mock function with given fields: ctx, params
func (_m *MockInvoker_texit) GetExecution(ctx context.Context, params texit.GetExecutionParams) (texit.GetExecutionRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetExecution")
	}

	var r0 texit.GetExecutionRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, texit.GetExecutionParams) (texit.GetExecutionRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, texit.GetExecutionParams) texit.GetExecutionRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(texit.GetExecutionRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, texit.GetExecutionParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_GetExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecution'
type MockInvoker_texit_GetExecution_Call struct {
	*mock.Call
}

// GetExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - params texit.GetExecutionParams
func (_e *MockInvoker_texit_Expecter) GetExecution(ctx interface{}, params interface{}) *MockInvoker_texit_GetExecution_Call {
	return &MockInvoker_texit_GetExecution_Call{Call: _e.mock.On("GetExecution", ctx, params)}
}

func (_c *MockInvoker_texit_GetExecution_Call) Run(run func(ctx context.Context, params texit.GetExecutionParams)) *MockInvoker_texit_GetExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(texit.GetExecutionParams))
	})
	return _c
}

func (_c *MockInvoker_texit_GetExecution_Call) Return(_a0 texit.GetExecutionRes, _a1 error) *MockInvoker_texit_GetExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_GetExecution_Call) RunAndReturn(run func(context.Context, texit.GetExecutionParams) (texit.GetExecutionRes, error)) *MockInvoker_texit_GetExecution_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeStatus provides a mock function with given fields: ctx, params
func (_m *MockInvoker_texit) GetNodeStatus(ctx context.Context, params texit.GetNodeStatusParams) (texit.GetNodeStatusRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeStatus")
	}

	var r0 texit.GetNodeStatusRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, texit.GetNodeStatusParams) (texit.GetNodeStatusRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, texit.GetNodeStatusParams) texit.GetNodeStatusRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(texit.GetNodeStatusRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, texit.GetNodeStatusParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_GetNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeStatus'
type MockInvoker_texit_GetNodeStatus_Call struct {
	*mock.Call
}

// GetNodeStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - params texit.GetNodeStatusParams
func (_e *MockInvoker_texit_Expecter) GetNodeStatus(ctx interface{}, params interface{}) *MockInvoker_texit_GetNodeStatus_Call {
	return &MockInvoker_texit_GetNodeStatus_Call{Call: _e.mock.On("GetNodeStatus", ctx, params)}
}

func (_c *MockInvoker_texit_GetNodeStatus_Call) Run(run func(ctx context.Context, params texit.GetNodeStatusParams)) *MockInvoker_texit_GetNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(texit.GetNodeStatusParams))
	})
	return _c
}

func (_c *MockInvoker_texit_GetNodeStatus_Call) Return(_a0 texit.GetNodeStatusRes, _a1 error) *MockInvoker_texit_GetNodeStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_GetNodeStatus_Call) RunAndReturn(run func(context.Context, texit.GetNodeStatusParams) (texit.GetNodeStatusRes, error)) *MockInvoker_texit_GetNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Health provides a mock function with given fields: ctx
func (_m *MockInvoker_texit) Health(ctx context.Context) (*texit.HealthResponseContent, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 *texit.HealthResponseContent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*texit.HealthResponseContent, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *texit.HealthResponseContent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*texit.HealthResponseContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type MockInvoker_texit_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInvoker_texit_Expecter) Health(ctx interface{}) *MockInvoker_texit_Health_Call {
	return &MockInvoker_texit_Health_Call{Call: _e.mock.On("Health", ctx)}
}

func (_c *MockInvoker_texit_Health_Call) Run(run func(ctx context.Context)) *MockInvoker_texit_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInvoker_texit_Health_Call) Return(_a0 *texit.HealthResponseContent, _a1 error) *MockInvoker_texit_Health_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_Health_Call) RunAndReturn(run func(context.Context) (*texit.HealthResponseContent, error)) *MockInvoker_texit_Health_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function with given fields: ctx
func (_m *MockInvoker_texit) ListNodes(ctx context.Context) (*texit.ListNodesResponseContent, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 *texit.ListNodesResponseContent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*texit.ListNodesResponseContent, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *texit.ListNodesResponseContent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*texit.ListNodesResponseContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockInvoker_texit_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInvoker_texit_Expecter) ListNodes(ctx interface{}) *MockInvoker_texit_ListNodes_Call {
	return &MockInvoker_texit_ListNodes_Call{Call: _e.mock.On("ListNodes", ctx)}
}

func (_c *MockInvoker_texit_ListNodes_Call) Run(run func(ctx context.Context)) *MockInvoker_texit_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInvoker_texit_ListNodes_Call) Return(_a0 *texit.ListNodesResponseContent, _a1 error) *MockInvoker_texit_ListNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_ListNodes_Call) RunAndReturn(run func(context.Context) (*texit.ListNodesResponseContent, error)) *MockInvoker_texit_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// ListProviders provides a mock function with given fields: ctx
func (_m *MockInvoker_texit) ListProviders(ctx context.Context) (*texit.ListProvidersResponseContent, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProviders")
	}

	var r0 *texit.ListProvidersResponseContent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*texit.ListProvidersResponseContent, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *texit.ListProvidersResponseContent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*texit.ListProvidersResponseContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_ListProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProviders'
type MockInvoker_texit_ListProviders_Call struct {
	*mock.Call
}

// ListProviders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInvoker_texit_Expecter) ListProviders(ctx interface{}) *MockInvoker_texit_ListProviders_Call {
	return &MockInvoker_texit_ListProviders_Call{Call: _e.mock.On("ListProviders", ctx)}
}

func (_c *MockInvoker_texit_ListProviders_Call) Run(run func(ctx context.Context)) *MockInvoker_texit_ListProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInvoker_texit_ListProviders_Call) Return(_a0 *texit.ListProvidersResponseContent, _a1 error) *MockInvoker_texit_ListProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_ListProviders_Call) RunAndReturn(run func(context.Context) (*texit.ListProvidersResponseContent, error)) *MockInvoker_texit_ListProviders_Call {
	_c.Call.Return(run)
	return _c
}

// ListTailnets provides a mock function with given fields: ctx
func (_m *MockInvoker_texit) ListTailnets(ctx context.Context) (*texit.ListTailnetsResponseContent, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListTailnets")
	}

	var r0 *texit.ListTailnetsResponseContent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*texit.ListTailnetsResponseContent, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *texit.ListTailnetsResponseContent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*texit.ListTailnetsResponseContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_ListTailnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTailnets'
type MockInvoker_texit_ListTailnets_Call struct {
	*mock.Call
}

// ListTailnets is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInvoker_texit_Expecter) ListTailnets(ctx interface{}) *MockInvoker_texit_ListTailnets_Call {
	return &MockInvoker_texit_ListTailnets_Call{Call: _e.mock.On("ListTailnets", ctx)}
}

func (_c *MockInvoker_texit_ListTailnets_Call) Run(run func(ctx context.Context)) *MockInvoker_texit_ListTailnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInvoker_texit_ListTailnets_Call) Return(_a0 *texit.ListTailnetsResponseContent, _a1 error) *MockInvoker_texit_ListTailnets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_ListTailnets_Call) RunAndReturn(run func(context.Context) (*texit.ListTailnetsResponseContent, error)) *MockInvoker_texit_ListTailnets_Call {
	_c.Call.Return(run)
	return _c
}

// ProvisionNode provides a mock function with given fields: ctx, request
func (_m *MockInvoker_texit) ProvisionNode(ctx context.Context, request *texit.ProvisionNodeRequestContent) (texit.ProvisionNodeRes, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionNode")
	}

	var r0 texit.ProvisionNodeRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *texit.ProvisionNodeRequestContent) (texit.ProvisionNodeRes, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *texit.ProvisionNodeRequestContent) texit.ProvisionNodeRes); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(texit.ProvisionNodeRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *texit.ProvisionNodeRequestContent) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_ProvisionNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvisionNode'
type MockInvoker_texit_ProvisionNode_Call struct {
	*mock.Call
}

// ProvisionNode is a helper method to define mock.On call
//   - ctx context.Context
//   - request *texit.ProvisionNodeRequestContent
func (_e *MockInvoker_texit_Expecter) ProvisionNode(ctx interface{}, request interface{}) *MockInvoker_texit_ProvisionNode_Call {
	return &MockInvoker_texit_ProvisionNode_Call{Call: _e.mock.On("ProvisionNode", ctx, request)}
}

func (_c *MockInvoker_texit_ProvisionNode_Call) Run(run func(ctx context.Context, request *texit.ProvisionNodeRequestContent)) *MockInvoker_texit_ProvisionNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*texit.ProvisionNodeRequestContent))
	})
	return _c
}

func (_c *MockInvoker_texit_ProvisionNode_Call) Return(_a0 texit.ProvisionNodeRes, _a1 error) *MockInvoker_texit_ProvisionNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_ProvisionNode_Call) RunAndReturn(run func(context.Context, *texit.ProvisionNodeRequestContent) (texit.ProvisionNodeRes, error)) *MockInvoker_texit_ProvisionNode_Call {
	_c.Call.Return(run)
	return _c
}

// StartNode provides a mock function with given fields: ctx, params
func (_m *MockInvoker_texit) StartNode(ctx context.Context, params texit.StartNodeParams) (texit.StartNodeRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for StartNode")
	}

	var r0 texit.StartNodeRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, texit.StartNodeParams) (texit.StartNodeRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, texit.StartNodeParams) texit.StartNodeRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(texit.StartNodeRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, texit.StartNodeParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_StartNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartNode'
type MockInvoker_texit_StartNode_Call struct {
	*mock.Call
}

// StartNode is a helper method to define mock.On call
//   - ctx context.Context
//   - params texit.StartNodeParams
func (_e *MockInvoker_texit_Expecter) StartNode(ctx interface{}, params interface{}) *MockInvoker_texit_StartNode_Call {
	return &MockInvoker_texit_StartNode_Call{Call: _e.mock.On("StartNode", ctx, params)}
}

func (_c *MockInvoker_texit_StartNode_Call) Run(run func(ctx context.Context, params texit.StartNodeParams)) *MockInvoker_texit_StartNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(texit.StartNodeParams))
	})
	return _c
}

func (_c *MockInvoker_texit_StartNode_Call) Return(_a0 texit.StartNodeRes, _a1 error) *MockInvoker_texit_StartNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_StartNode_Call) RunAndReturn(run func(context.Context, texit.StartNodeParams) (texit.StartNodeRes, error)) *MockInvoker_texit_StartNode_Call {
	_c.Call.Return(run)
	return _c
}

// StopNode provides a mock function with given fields: ctx, params
func (_m *MockInvoker_texit) StopNode(ctx context.Context, params texit.StopNodeParams) (texit.StopNodeRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for StopNode")
	}

	var r0 texit.StopNodeRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, texit.StopNodeParams) (texit.StopNodeRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, texit.StopNodeParams) texit.StopNodeRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(texit.StopNodeRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, texit.StopNodeParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoker_texit_StopNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopNode'
type MockInvoker_texit_StopNode_Call struct {
	*mock.Call
}

// StopNode is a helper method to define mock.On call
//   - ctx context.Context
//   - params texit.StopNodeParams
func (_e *MockInvoker_texit_Expecter) StopNode(ctx interface{}, params interface{}) *MockInvoker_texit_StopNode_Call {
	return &MockInvoker_texit_StopNode_Call{Call: _e.mock.On("StopNode", ctx, params)}
}

func (_c *MockInvoker_texit_StopNode_Call) Run(run func(ctx context.Context, params texit.StopNodeParams)) *MockInvoker_texit_StopNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(texit.StopNodeParams))
	})
	return _c
}

func (_c *MockInvoker_texit_StopNode_Call) Return(_a0 texit.StopNodeRes, _a1 error) *MockInvoker_texit_StopNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoker_texit_StopNode_Call) RunAndReturn(run func(context.Context, texit.StopNodeParams) (texit.StopNodeRes, error)) *MockInvoker_texit_StopNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInvoker_texit creates a new instance of MockInvoker_texit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInvoker_texit(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInvoker_texit {
	mock := &MockInvoker_texit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
