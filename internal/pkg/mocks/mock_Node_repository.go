// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	node "github.com/awlsring/texit/internal/pkg/domain/node"
	mock "github.com/stretchr/testify/mock"
)

// MockNode_repository is an autogenerated mock type for the Node type
type MockNode_repository struct {
	mock.Mock
}

type MockNode_repository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNode_repository) EXPECT() *MockNode_repository_Expecter {
	return &MockNode_repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockNode_repository) Create(ctx context.Context, _a1 *node.Node) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *node.Node) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNode_repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockNode_repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *node.Node
func (_e *MockNode_repository_Expecter) Create(ctx interface{}, _a1 interface{}) *MockNode_repository_Create_Call {
	return &MockNode_repository_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockNode_repository_Create_Call) Run(run func(ctx context.Context, _a1 *node.Node)) *MockNode_repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*node.Node))
	})
	return _c
}

func (_c *MockNode_repository_Create_Call) Return(_a0 error) *MockNode_repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_repository_Create_Call) RunAndReturn(run func(context.Context, *node.Node) error) *MockNode_repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockNode_repository) Delete(ctx context.Context, id node.Identifier) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNode_repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockNode_repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id node.Identifier
func (_e *MockNode_repository_Expecter) Delete(ctx interface{}, id interface{}) *MockNode_repository_Delete_Call {
	return &MockNode_repository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockNode_repository_Delete_Call) Run(run func(ctx context.Context, id node.Identifier)) *MockNode_repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(node.Identifier))
	})
	return _c
}

func (_c *MockNode_repository_Delete_Call) Return(_a0 error) *MockNode_repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_repository_Delete_Call) RunAndReturn(run func(context.Context, node.Identifier) error) *MockNode_repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockNode_repository) Get(ctx context.Context, id node.Identifier) (*node.Node, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *node.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier) (*node.Node, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier) *node.Node); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, node.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNode_repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockNode_repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id node.Identifier
func (_e *MockNode_repository_Expecter) Get(ctx interface{}, id interface{}) *MockNode_repository_Get_Call {
	return &MockNode_repository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockNode_repository_Get_Call) Run(run func(ctx context.Context, id node.Identifier)) *MockNode_repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(node.Identifier))
	})
	return _c
}

func (_c *MockNode_repository_Get_Call) Return(_a0 *node.Node, _a1 error) *MockNode_repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNode_repository_Get_Call) RunAndReturn(run func(context.Context, node.Identifier) (*node.Node, error)) *MockNode_repository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: ctx
func (_m *MockNode_repository) Init(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNode_repository_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockNode_repository_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNode_repository_Expecter) Init(ctx interface{}) *MockNode_repository_Init_Call {
	return &MockNode_repository_Init_Call{Call: _e.mock.On("Init", ctx)}
}

func (_c *MockNode_repository_Init_Call) Run(run func(ctx context.Context)) *MockNode_repository_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNode_repository_Init_Call) Return(_a0 error) *MockNode_repository_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_repository_Init_Call) RunAndReturn(run func(context.Context) error) *MockNode_repository_Init_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockNode_repository) List(ctx context.Context) ([]*node.Node, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*node.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*node.Node, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*node.Node); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*node.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNode_repository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockNode_repository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNode_repository_Expecter) List(ctx interface{}) *MockNode_repository_List_Call {
	return &MockNode_repository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockNode_repository_List_Call) Run(run func(ctx context.Context)) *MockNode_repository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNode_repository_List_Call) Return(_a0 []*node.Node, _a1 error) *MockNode_repository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNode_repository_List_Call) RunAndReturn(run func(context.Context) ([]*node.Node, error)) *MockNode_repository_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNode_repository creates a new instance of MockNode_repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNode_repository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNode_repository {
	mock := &MockNode_repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
