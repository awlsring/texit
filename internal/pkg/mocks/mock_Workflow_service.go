// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	node "github.com/awlsring/tailscale-cloud-exit-nodes/internal/pkg/domain/node"
	provider "github.com/awlsring/tailscale-cloud-exit-nodes/internal/pkg/domain/provider"
	mock "github.com/stretchr/testify/mock"

	tailnet "github.com/awlsring/tailscale-cloud-exit-nodes/internal/pkg/domain/tailnet"

	workflow "github.com/awlsring/tailscale-cloud-exit-nodes/internal/pkg/domain/workflow"
)

// MockWorkflow_service is an autogenerated mock type for the Workflow type
type MockWorkflow_service struct {
	mock.Mock
}

type MockWorkflow_service_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkflow_service) EXPECT() *MockWorkflow_service_Expecter {
	return &MockWorkflow_service_Expecter{mock: &_m.Mock}
}

// GetExecution provides a mock function with given fields: _a0, _a1
func (_m *MockWorkflow_service) GetExecution(_a0 context.Context, _a1 workflow.ExecutionIdentifier) (*workflow.Execution, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetExecution")
	}

	var r0 *workflow.Execution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workflow.ExecutionIdentifier) (*workflow.Execution, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workflow.ExecutionIdentifier) *workflow.Execution); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.Execution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workflow.ExecutionIdentifier) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkflow_service_GetExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecution'
type MockWorkflow_service_GetExecution_Call struct {
	*mock.Call
}

// GetExecution is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 workflow.ExecutionIdentifier
func (_e *MockWorkflow_service_Expecter) GetExecution(_a0 interface{}, _a1 interface{}) *MockWorkflow_service_GetExecution_Call {
	return &MockWorkflow_service_GetExecution_Call{Call: _e.mock.On("GetExecution", _a0, _a1)}
}

func (_c *MockWorkflow_service_GetExecution_Call) Run(run func(_a0 context.Context, _a1 workflow.ExecutionIdentifier)) *MockWorkflow_service_GetExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workflow.ExecutionIdentifier))
	})
	return _c
}

func (_c *MockWorkflow_service_GetExecution_Call) Return(_a0 *workflow.Execution, _a1 error) *MockWorkflow_service_GetExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkflow_service_GetExecution_Call) RunAndReturn(run func(context.Context, workflow.ExecutionIdentifier) (*workflow.Execution, error)) *MockWorkflow_service_GetExecution_Call {
	_c.Call.Return(run)
	return _c
}

// LaunchDeprovisionNodeWorkflow provides a mock function with given fields: _a0, _a1
func (_m *MockWorkflow_service) LaunchDeprovisionNodeWorkflow(_a0 context.Context, _a1 node.Identifier) (workflow.ExecutionIdentifier, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LaunchDeprovisionNodeWorkflow")
	}

	var r0 workflow.ExecutionIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier) (workflow.ExecutionIdentifier, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, node.Identifier) workflow.ExecutionIdentifier); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(workflow.ExecutionIdentifier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, node.Identifier) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkflow_service_LaunchDeprovisionNodeWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LaunchDeprovisionNodeWorkflow'
type MockWorkflow_service_LaunchDeprovisionNodeWorkflow_Call struct {
	*mock.Call
}

// LaunchDeprovisionNodeWorkflow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 node.Identifier
func (_e *MockWorkflow_service_Expecter) LaunchDeprovisionNodeWorkflow(_a0 interface{}, _a1 interface{}) *MockWorkflow_service_LaunchDeprovisionNodeWorkflow_Call {
	return &MockWorkflow_service_LaunchDeprovisionNodeWorkflow_Call{Call: _e.mock.On("LaunchDeprovisionNodeWorkflow", _a0, _a1)}
}

func (_c *MockWorkflow_service_LaunchDeprovisionNodeWorkflow_Call) Run(run func(_a0 context.Context, _a1 node.Identifier)) *MockWorkflow_service_LaunchDeprovisionNodeWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(node.Identifier))
	})
	return _c
}

func (_c *MockWorkflow_service_LaunchDeprovisionNodeWorkflow_Call) Return(_a0 workflow.ExecutionIdentifier, _a1 error) *MockWorkflow_service_LaunchDeprovisionNodeWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkflow_service_LaunchDeprovisionNodeWorkflow_Call) RunAndReturn(run func(context.Context, node.Identifier) (workflow.ExecutionIdentifier, error)) *MockWorkflow_service_LaunchDeprovisionNodeWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// LaunchProvisionNodeWorkflow provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockWorkflow_service) LaunchProvisionNodeWorkflow(_a0 context.Context, _a1 *provider.Provider, _a2 provider.Location, _a3 *tailnet.Tailnet, _a4 bool) (workflow.ExecutionIdentifier, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for LaunchProvisionNodeWorkflow")
	}

	var r0 workflow.ExecutionIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *provider.Provider, provider.Location, *tailnet.Tailnet, bool) (workflow.ExecutionIdentifier, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *provider.Provider, provider.Location, *tailnet.Tailnet, bool) workflow.ExecutionIdentifier); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(workflow.ExecutionIdentifier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *provider.Provider, provider.Location, *tailnet.Tailnet, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkflow_service_LaunchProvisionNodeWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LaunchProvisionNodeWorkflow'
type MockWorkflow_service_LaunchProvisionNodeWorkflow_Call struct {
	*mock.Call
}

// LaunchProvisionNodeWorkflow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *provider.Provider
//   - _a2 provider.Location
//   - _a3 *tailnet.Tailnet
//   - _a4 bool
func (_e *MockWorkflow_service_Expecter) LaunchProvisionNodeWorkflow(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *MockWorkflow_service_LaunchProvisionNodeWorkflow_Call {
	return &MockWorkflow_service_LaunchProvisionNodeWorkflow_Call{Call: _e.mock.On("LaunchProvisionNodeWorkflow", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *MockWorkflow_service_LaunchProvisionNodeWorkflow_Call) Run(run func(_a0 context.Context, _a1 *provider.Provider, _a2 provider.Location, _a3 *tailnet.Tailnet, _a4 bool)) *MockWorkflow_service_LaunchProvisionNodeWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*provider.Provider), args[2].(provider.Location), args[3].(*tailnet.Tailnet), args[4].(bool))
	})
	return _c
}

func (_c *MockWorkflow_service_LaunchProvisionNodeWorkflow_Call) Return(_a0 workflow.ExecutionIdentifier, _a1 error) *MockWorkflow_service_LaunchProvisionNodeWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkflow_service_LaunchProvisionNodeWorkflow_Call) RunAndReturn(run func(context.Context, *provider.Provider, provider.Location, *tailnet.Tailnet, bool) (workflow.ExecutionIdentifier, error)) *MockWorkflow_service_LaunchProvisionNodeWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkflow_service creates a new instance of MockWorkflow_service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkflow_service(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkflow_service {
	mock := &MockWorkflow_service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
